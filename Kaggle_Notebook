{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":66631,"databundleVersionId":8346466,"sourceType":"competition"},{"sourceId":3176,"sourceType":"datasetVersion","datasetId":1835}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Kaggle Competition Notebook:\"LMSYS - Chatbot Arena Human Preference Predictions\"","metadata":{}},{"cell_type":"markdown","source":"In this notebook, I am conducting data exploration, analysis, and modeling in order to generate predictions for which Chatbot model will be preferred for a given prompt.","metadata":{}},{"cell_type":"markdown","source":"## Data Loading and Exploration","metadata":{}},{"cell_type":"markdown","source":"First, import necessary packages, and connect to kaggle to import competition dataset:","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-27T19:38:47.326364Z","iopub.execute_input":"2024-07-27T19:38:47.326724Z","iopub.status.idle":"2024-07-27T19:38:47.678488Z","shell.execute_reply.started":"2024-07-27T19:38:47.326697Z","shell.execute_reply":"2024-07-27T19:38:47.677630Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"/kaggle/input/lmsys-chatbot-arena/sample_submission.csv\n/kaggle/input/lmsys-chatbot-arena/train.csv\n/kaggle/input/lmsys-chatbot-arena/test.csv\n/kaggle/input/glove-global-vectors-for-word-representation/glove.6B.200d.txt\n/kaggle/input/glove-global-vectors-for-word-representation/glove.6B.50d.txt\n/kaggle/input/glove-global-vectors-for-word-representation/glove.6B.100d.txt\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport math\nimport seaborn as sns\nsns.set(font_scale=2)\n# from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n# from sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier, RandomForestClassifier\n# from sklearn.metrics import precision_score, accuracy_score, f1_score, confusion_matrix, classification_report, roc_curve, auc, ConfusionMatrixDisplay\n# from sklearn.tree import DecisionTreeClassifier\n# from sklearn import tree\n# from sklearn.neighbors import KNeighborsClassifier\nimport nltk\nnltk.download('punkt')\nfrom nltk.corpus import stopwords\nimport re\nfrom nltk.tokenize import RegexpTokenizer, word_tokenize\nfrom sklearn.metrics import log_loss\nfrom sklearn.pipeline import Pipeline\nfrom sklearn import feature_extraction, linear_model, model_selection, preprocessing\n# from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer, TfidfTransformer\n# from nltk import FreqDist\n# from sklearn.naive_bayes import MultinomialNB\n# from nltk.stem.snowball import SnowballStemmer\n# from sklearn.model_selection import GridSearchCV\n# from sklearn.multioutput import MultiOutputClassifier\n\n# from gensim.models import word2vec","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:38:48.664970Z","iopub.execute_input":"2024-07-27T19:38:48.665774Z","iopub.status.idle":"2024-07-27T19:38:50.026326Z","shell.execute_reply.started":"2024-07-27T19:38:48.665737Z","shell.execute_reply":"2024-07-27T19:38:50.025323Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package punkt to /usr/share/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install keras==2.15.0","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:38:50.027843Z","iopub.execute_input":"2024-07-27T19:38:50.028135Z","iopub.status.idle":"2024-07-27T19:39:05.673042Z","shell.execute_reply.started":"2024-07-27T19:38:50.028109Z","shell.execute_reply":"2024-07-27T19:39:05.672079Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Collecting keras==2.15.0\n  Downloading keras-2.15.0-py3-none-any.whl.metadata (2.4 kB)\nDownloading keras-2.15.0-py3-none-any.whl (1.7 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m7.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hInstalling collected packages: keras\n  Attempting uninstall: keras\n    Found existing installation: keras 3.2.1\n    Uninstalling keras-3.2.1:\n      Successfully uninstalled keras-3.2.1\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ntensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed keras-2.15.0\n","output_type":"stream"}]},{"cell_type":"code","source":"# from tensorflow import keras\nimport keras\n# import keras_nlp\nimport tensorflow as tf\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:39:05.675368Z","iopub.execute_input":"2024-07-27T19:39:05.676220Z","iopub.status.idle":"2024-07-27T19:39:16.218403Z","shell.execute_reply.started":"2024-07-27T19:39:05.676178Z","shell.execute_reply":"2024-07-27T19:39:16.217425Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stderr","text":"2024-07-27 19:39:07.266452: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-07-27 19:39:07.266591: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-07-27 19:39:07.377586: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"from keras.models import Model\n\nfrom keras.layers import Dense, Input\n\nfrom tqdm.auto import tqdm\n\nfrom keras.layers import TextVectorization\n# from keras import Sequential\nfrom keras.layers import Dense, Embedding, GlobalAveragePooling1D\n\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Input, Dense, LSTM, Embedding\nfrom keras.layers import Softmax\nfrom keras.layers import Dropout, Activation, Bidirectional, GlobalMaxPool1D\nfrom keras.models import Sequential\nfrom keras import initializers, regularizers, constraints, optimizers, layers\nfrom keras.preprocessing import text, sequence","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:39:16.219626Z","iopub.execute_input":"2024-07-27T19:39:16.220121Z","iopub.status.idle":"2024-07-27T19:39:16.235140Z","shell.execute_reply.started":"2024-07-27T19:39:16.220096Z","shell.execute_reply":"2024-07-27T19:39:16.234296Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":"Loading and exploring the train and test datasets:","metadata":{}},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/lmsys-chatbot-arena/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/lmsys-chatbot-arena/test.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:39:16.237049Z","iopub.execute_input":"2024-07-27T19:39:16.237337Z","iopub.status.idle":"2024-07-27T19:39:19.497870Z","shell.execute_reply.started":"2024-07-27T19:39:16.237311Z","shell.execute_reply":"2024-07-27T19:39:19.496980Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:39:30.799731Z","iopub.execute_input":"2024-07-27T19:39:30.800098Z","iopub.status.idle":"2024-07-27T19:39:30.825519Z","shell.execute_reply.started":"2024-07-27T19:39:30.800070Z","shell.execute_reply":"2024-07-27T19:39:30.824555Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"       id             model_a              model_b  \\\n0   30192  gpt-4-1106-preview           gpt-4-0613   \n1   53567           koala-13b           gpt-4-0613   \n2   65089  gpt-3.5-turbo-0613       mistral-medium   \n3   96401    llama-2-13b-chat  mistral-7b-instruct   \n4  198779           koala-13b   gpt-3.5-turbo-0314   \n\n                                              prompt  \\\n0  [\"Is it morally right to try to have a certain...   \n1  [\"What is the difference between marriage lice...   \n2  [\"explain function calling. how would you call...   \n3  [\"How can I create a test set for a very rare ...   \n4  [\"What is the best way to travel from Tel-Aviv...   \n\n                                          response_a  \\\n0  [\"The question of whether it is morally right ...   \n1  [\"A marriage license is a legal document that ...   \n2  [\"Function calling is the process of invoking ...   \n3  [\"Creating a test set for a very rare category...   \n4  [\"The best way to travel from Tel Aviv to Jeru...   \n\n                                          response_b  winner_model_a  \\\n0  [\"As an AI, I don't have personal beliefs or o...               1   \n1  [\"A marriage license and a marriage certificat...               0   \n2  [\"Function calling is the process of invoking ...               0   \n3  [\"When building a classifier for a very rare c...               1   \n4  [\"The best way to travel from Tel-Aviv to Jeru...               0   \n\n   winner_model_b  winner_tie  \n0               0           0  \n1               1           0  \n2               0           1  \n3               0           0  \n4               1           0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>model_a</th>\n      <th>model_b</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>gpt-4-1106-preview</td>\n      <td>gpt-4-0613</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>koala-13b</td>\n      <td>gpt-4-0613</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>gpt-3.5-turbo-0613</td>\n      <td>mistral-medium</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>llama-2-13b-chat</td>\n      <td>mistral-7b-instruct</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>koala-13b</td>\n      <td>gpt-3.5-turbo-0314</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:39:31.044666Z","iopub.execute_input":"2024-07-27T19:39:31.044972Z","iopub.status.idle":"2024-07-27T19:39:31.056023Z","shell.execute_reply.started":"2024-07-27T19:39:31.044947Z","shell.execute_reply":"2024-07-27T19:39:31.055156Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"        id                                             prompt  \\\n0   136060  [\"I have three oranges today, I ate an orange ...   \n1   211333  [\"You are a mediator in a heated political deb...   \n2  1233961  [\"How to initialize the classification head wh...   \n\n                                          response_a  \\\n0                    [\"You have two oranges today.\"]   \n1  [\"Thank you for sharing the details of the sit...   \n2  [\"When you want to initialize the classificati...   \n\n                                          response_b  \n0  [\"You still have three oranges. Eating an oran...  \n1  [\"Mr Reddy and Ms Blue both have valid points ...  \n2  [\"To initialize the classification head when p...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>136060</td>\n      <td>[\"I have three oranges today, I ate an orange ...</td>\n      <td>[\"You have two oranges today.\"]</td>\n      <td>[\"You still have three oranges. Eating an oran...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>211333</td>\n      <td>[\"You are a mediator in a heated political deb...</td>\n      <td>[\"Thank you for sharing the details of the sit...</td>\n      <td>[\"Mr Reddy and Ms Blue both have valid points ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1233961</td>\n      <td>[\"How to initialize the classification head wh...</td>\n      <td>[\"When you want to initialize the classificati...</td>\n      <td>[\"To initialize the classification head when p...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:39:31.231893Z","iopub.execute_input":"2024-07-27T19:39:31.232362Z","iopub.status.idle":"2024-07-27T19:39:31.285967Z","shell.execute_reply.started":"2024-07-27T19:39:31.232339Z","shell.execute_reply":"2024-07-27T19:39:31.285018Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 57477 entries, 0 to 57476\nData columns (total 9 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   id              57477 non-null  int64 \n 1   model_a         57477 non-null  object\n 2   model_b         57477 non-null  object\n 3   prompt          57477 non-null  object\n 4   response_a      57477 non-null  object\n 5   response_b      57477 non-null  object\n 6   winner_model_a  57477 non-null  int64 \n 7   winner_model_b  57477 non-null  int64 \n 8   winner_tie      57477 non-null  int64 \ndtypes: int64(4), object(5)\nmemory usage: 3.9+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"train.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:39:31.389663Z","iopub.execute_input":"2024-07-27T19:39:31.389969Z","iopub.status.idle":"2024-07-27T19:39:31.416283Z","shell.execute_reply.started":"2024-07-27T19:39:31.389946Z","shell.execute_reply":"2024-07-27T19:39:31.415427Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"                 id  winner_model_a  winner_model_b    winner_tie\ncount  5.747700e+04    57477.000000    57477.000000  57477.000000\nmean   2.142564e+09        0.349079        0.341911      0.309011\nstd    1.238327e+09        0.476683        0.474354      0.462090\nmin    3.019200e+04        0.000000        0.000000      0.000000\n25%    1.071821e+09        0.000000        0.000000      0.000000\n50%    2.133658e+09        0.000000        0.000000      0.000000\n75%    3.211645e+09        1.000000        1.000000      1.000000\nmax    4.294947e+09        1.000000        1.000000      1.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5.747700e+04</td>\n      <td>57477.000000</td>\n      <td>57477.000000</td>\n      <td>57477.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2.142564e+09</td>\n      <td>0.349079</td>\n      <td>0.341911</td>\n      <td>0.309011</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.238327e+09</td>\n      <td>0.476683</td>\n      <td>0.474354</td>\n      <td>0.462090</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>3.019200e+04</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.071821e+09</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2.133658e+09</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>3.211645e+09</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>4.294947e+09</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"I'm interested to see what models are winning most often in the datasets:","metadata":{}},{"cell_type":"code","source":"winner_a = train[train['winner_model_a']==True]","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:39:31.822838Z","iopub.execute_input":"2024-07-27T19:39:31.823126Z","iopub.status.idle":"2024-07-27T19:39:31.833758Z","shell.execute_reply.started":"2024-07-27T19:39:31.823104Z","shell.execute_reply":"2024-07-27T19:39:31.832681Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"winner_b = train[train['winner_model_b']==True]","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:39:32.226676Z","iopub.execute_input":"2024-07-27T19:39:32.227038Z","iopub.status.idle":"2024-07-27T19:39:32.235518Z","shell.execute_reply.started":"2024-07-27T19:39:32.227013Z","shell.execute_reply":"2024-07-27T19:39:32.234677Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"winner_a['model_a'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:39:32.590597Z","iopub.execute_input":"2024-07-27T19:39:32.590895Z","iopub.status.idle":"2024-07-27T19:39:32.601779Z","shell.execute_reply.started":"2024-07-27T19:39:32.590872Z","shell.execute_reply":"2024-07-27T19:39:32.600808Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"model_a\ngpt-4-1106-preview          2019\ngpt-4-0613                  1280\ngpt-3.5-turbo-0613          1213\ngpt-4-0314                  1033\nclaude-2.1                   896\n                            ... \nchatglm2-6b                   35\nqwen1.5-7b-chat               29\nopenchat-3.5-0106             28\nqwen1.5-4b-chat               19\nmistral-7b-instruct-v0.2      15\nName: count, Length: 64, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"winner_b['model_b'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:39:32.984911Z","iopub.execute_input":"2024-07-27T19:39:32.985940Z","iopub.status.idle":"2024-07-27T19:39:33.000540Z","shell.execute_reply.started":"2024-07-27T19:39:32.985895Z","shell.execute_reply":"2024-07-27T19:39:32.999327Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"model_b\ngpt-4-1106-preview          2054\ngpt-4-0613                  1170\ngpt-3.5-turbo-0613          1168\ngpt-4-0314                   960\nclaude-1                     880\n                            ... \nchatglm2-6b                   38\nopenchat-3.5-0106             35\nqwen1.5-7b-chat               22\nqwen1.5-4b-chat               16\nmistral-7b-instruct-v0.2      12\nName: count, Length: 64, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"The top 4 models that won most often as model a or as model b are:\n- gpt-4-1106-preview\n- gpt-4-0613\n- gpt-3.5-turbo-0613\n- gpt-4-0314","metadata":{}},{"cell_type":"markdown","source":"## Data Preparation","metadata":{}},{"cell_type":"markdown","source":"Since the 'prompt', 'response_a', and 'response_b' features are text, they need to be cleaned:","metadata":{}},{"cell_type":"code","source":"# Creating a function to perform cleaning steps at once (Removes numbers and unnecessary characters, makes all letters lowercase, removes stopwords)\nnltk.download('stopwords')\nstopwords_list = stopwords.words('english')\n\nno_bad_chars = re.compile('[!\\\"#$%&()*+-./:;<=>?@[\\]^_`{|}~\\n - ]')\n# no_nums = re.compile('[\\d-]')\n\ndef clean_text(text):\n#     text = no_nums.sub('', text)\n    text = no_bad_chars.sub(' ', text)\n    text = text.lower()\n    text = ' '.join(word for word in text.split() if word not in stopwords_list)\n    return text\n     ","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:39:34.077734Z","iopub.execute_input":"2024-07-27T19:39:34.078084Z","iopub.status.idle":"2024-07-27T19:39:34.090160Z","shell.execute_reply.started":"2024-07-27T19:39:34.078058Z","shell.execute_reply":"2024-07-27T19:39:34.089118Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n","output_type":"stream"}]},{"cell_type":"code","source":"train_cleaned = train.copy()\ntrain['model_a'] = train['model_a'].astype(str)\ntrain['model_b'] = train['model_b'].astype(str)\ntrain['prompt'] = train['prompt'].astype(str)\ntrain['response_a'] = train['response_a'].astype(str)\ntrain['response_b'] = train['response_b'].astype(str)\n\n\n     ","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:39:34.441716Z","iopub.execute_input":"2024-07-27T19:39:34.441996Z","iopub.status.idle":"2024-07-27T19:39:34.463808Z","shell.execute_reply.started":"2024-07-27T19:39:34.441974Z","shell.execute_reply":"2024-07-27T19:39:34.463093Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"#Applying text cleaning function to text columns\n\ntrain_cleaned['model_a'] = (train['model_a']).apply(clean_text)\ntrain_cleaned['model_b'] = (train['model_b']).apply(clean_text)\ntrain_cleaned['prompt'] = (train['prompt']).apply(clean_text)\ntrain_cleaned['response_a'] = (train['response_a']).apply(clean_text)\ntrain_cleaned['response_b'] = (train['response_b']).apply(clean_text)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:39:34.796516Z","iopub.execute_input":"2024-07-27T19:39:34.796847Z","iopub.status.idle":"2024-07-27T19:40:42.007820Z","shell.execute_reply.started":"2024-07-27T19:39:34.796822Z","shell.execute_reply":"2024-07-27T19:40:42.006897Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"train_cleaned['winner_model_a'] = train['winner_model_a']\ntrain_cleaned['winner_model_b'] = train['winner_model_b']\ntrain_cleaned['winner_tie'] = train['winner_tie']","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:40:42.009661Z","iopub.execute_input":"2024-07-27T19:40:42.010349Z","iopub.status.idle":"2024-07-27T19:40:42.016153Z","shell.execute_reply.started":"2024-07-27T19:40:42.010297Z","shell.execute_reply":"2024-07-27T19:40:42.015293Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"print(train_cleaned.prompt.str.len().max())\nprint(train_cleaned.prompt.str.len().min())","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:40:42.062193Z","iopub.execute_input":"2024-07-27T19:40:42.062503Z","iopub.status.idle":"2024-07-27T19:40:42.138047Z","shell.execute_reply.started":"2024-07-27T19:40:42.062456Z","shell.execute_reply":"2024-07-27T19:40:42.137186Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"25012\n0\n","output_type":"stream"}]},{"cell_type":"code","source":"len(train_cleaned[train_cleaned.prompt.str.len()==0])","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:40:42.139175Z","iopub.execute_input":"2024-07-27T19:40:42.139903Z","iopub.status.idle":"2024-07-27T19:40:42.180066Z","shell.execute_reply.started":"2024-07-27T19:40:42.139869Z","shell.execute_reply":"2024-07-27T19:40:42.179260Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"137"},"metadata":{}}]},{"cell_type":"code","source":"len(train_cleaned[train_cleaned.response_a.str.len()==0])","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:40:42.181251Z","iopub.execute_input":"2024-07-27T19:40:42.181569Z","iopub.status.idle":"2024-07-27T19:40:42.228033Z","shell.execute_reply.started":"2024-07-27T19:40:42.181545Z","shell.execute_reply":"2024-07-27T19:40:42.227072Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"147"},"metadata":{}}]},{"cell_type":"code","source":"len(train_cleaned[train_cleaned.response_b.str.len()==0])","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:40:42.229120Z","iopub.execute_input":"2024-07-27T19:40:42.229409Z","iopub.status.idle":"2024-07-27T19:40:42.274384Z","shell.execute_reply.started":"2024-07-27T19:40:42.229386Z","shell.execute_reply":"2024-07-27T19:40:42.273513Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"131"},"metadata":{}}]},{"cell_type":"code","source":"train_cleaned2 = train_cleaned[(train_cleaned.prompt.astype(str).str.len()>0) & (train_cleaned.response_a.astype(str).str.len()>0)& (train_cleaned.response_b.astype(str).str.len()>0)]","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:40:42.275465Z","iopub.execute_input":"2024-07-27T19:40:42.275819Z","iopub.status.idle":"2024-07-27T19:40:42.402799Z","shell.execute_reply.started":"2024-07-27T19:40:42.275785Z","shell.execute_reply":"2024-07-27T19:40:42.402020Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"train_cleaned2.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:40:42.403909Z","iopub.execute_input":"2024-07-27T19:40:42.404212Z","iopub.status.idle":"2024-07-27T19:40:42.444216Z","shell.execute_reply.started":"2024-07-27T19:40:42.404187Z","shell.execute_reply":"2024-07-27T19:40:42.443312Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 57119 entries, 0 to 57476\nData columns (total 9 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   id              57119 non-null  int64 \n 1   model_a         57119 non-null  object\n 2   model_b         57119 non-null  object\n 3   prompt          57119 non-null  object\n 4   response_a      57119 non-null  object\n 5   response_b      57119 non-null  object\n 6   winner_model_a  57119 non-null  int64 \n 7   winner_model_b  57119 non-null  int64 \n 8   winner_tie      57119 non-null  int64 \ndtypes: int64(4), object(5)\nmemory usage: 4.4+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"# getting the total vocab length for the trainset\ntrain_cleaned2['combined_text'] = train_cleaned2['prompt'] + ' ' + train_cleaned2['response_a'] + ' ' + train_cleaned2['response_b']\ndata = train_cleaned2['combined_text'].map(word_tokenize).values\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:40:42.447677Z","iopub.execute_input":"2024-07-27T19:40:42.447948Z","iopub.status.idle":"2024-07-27T19:43:57.772927Z","shell.execute_reply.started":"2024-07-27T19:40:42.447926Z","shell.execute_reply":"2024-07-27T19:43:57.771883Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_34/2551869540.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  train_cleaned2['combined_text'] = train_cleaned2['prompt'] + ' ' + train_cleaned2['response_a'] + ' ' + train_cleaned2['response_b']\n","output_type":"stream"}]},{"cell_type":"code","source":"# train_cleaned['combined_text'] = train_cleaned['prompt'] + ' ' + train_cleaned['response_a'] + ' ' + train_cleaned['response_b']\n# data = train_cleaned['combined_text'].map(word_tokenize).values\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:43:57.774097Z","iopub.execute_input":"2024-07-27T19:43:57.774386Z","iopub.status.idle":"2024-07-27T19:43:57.778791Z","shell.execute_reply.started":"2024-07-27T19:43:57.774362Z","shell.execute_reply":"2024-07-27T19:43:57.777809Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"total_vocabulary = set(word for combined_text in data for word in combined_text)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:43:57.779845Z","iopub.execute_input":"2024-07-27T19:43:57.780122Z","iopub.status.idle":"2024-07-27T19:43:59.965912Z","shell.execute_reply.started":"2024-07-27T19:43:57.780099Z","shell.execute_reply":"2024-07-27T19:43:59.964782Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"len(total_vocabulary)\nprint('There are {} unique words in the dataset.'.format(len(total_vocabulary)))","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:43:59.967320Z","iopub.execute_input":"2024-07-27T19:43:59.968102Z","iopub.status.idle":"2024-07-27T19:43:59.973297Z","shell.execute_reply.started":"2024-07-27T19:43:59.968066Z","shell.execute_reply":"2024-07-27T19:43:59.972333Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"There are 444900 unique words in the dataset.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Removing any unnecessary features:","metadata":{}},{"cell_type":"code","source":"# The features 'model_a' and 'model_b' are not in the test dataset, so I won't use these for modeling\n# I will also remove the 'combined_text' feature I created to get the total vocabulary, and the 'id' feature\ntrain_cleaned2.pop('combined_text')\n\ntrain_cleaned2.pop('model_a')\n\ntrain_cleaned2.pop('model_b')\n\ntrain_cleaned2.pop('id')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:44:00.082251Z","iopub.execute_input":"2024-07-27T19:44:00.082593Z","iopub.status.idle":"2024-07-27T19:44:00.097272Z","shell.execute_reply.started":"2024-07-27T19:44:00.082566Z","shell.execute_reply":"2024-07-27T19:44:00.096244Z"},"trusted":true},"execution_count":37,"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"2749      213955494\n22377    1665523239\n26621    1981057741\n54045    4039389316\n29694    2206060258\n            ...    \n7401      555347592\n49314    3683616020\n7795      584476343\n4657      351616452\n54491    4071564983\nName: id, Length: 14280, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"Train-test splitting the data:","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\ntrain_, test_ = train_test_split(train_cleaned2, random_state=22)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:43:59.974585Z","iopub.execute_input":"2024-07-27T19:43:59.975227Z","iopub.status.idle":"2024-07-27T19:44:00.043040Z","shell.execute_reply.started":"2024-07-27T19:43:59.975192Z","shell.execute_reply":"2024-07-27T19:44:00.042285Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"markdown","source":"Each of the input features need to be tokenized and vectorized, so that a model can interpret them:","metadata":{}},{"cell_type":"code","source":"#tokenize train text features  \n# num_words parameter set to the total vocabulary length + 1\n\ntokenizer = text.Tokenizer(num_words=444901)\n\ntokenizer.fit_on_texts(list(train_['prompt']))\ntokenized_prmpt_rsps_tr = tokenizer.texts_to_sequences(train_['prompt'])\n \ntokenizer.fit_on_texts(list(train_['response_a']))\ntokenized_rsps_a_tr = tokenizer.texts_to_sequences(train_['response_a'])\n\ntokenizer.fit_on_texts(list(train_['response_b']))\ntokenized_rsps_b_tr = tokenizer.texts_to_sequences(train_['response_b'])\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:44:00.134844Z","iopub.execute_input":"2024-07-27T19:44:00.135173Z","iopub.status.idle":"2024-07-27T19:44:23.431959Z","shell.execute_reply.started":"2024-07-27T19:44:00.135150Z","shell.execute_reply":"2024-07-27T19:44:23.431152Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"# tokenize test text features\n\ntokenizer.fit_on_texts(list(test_['prompt']))\ntokenized_prmpt_rsps_te = tokenizer.texts_to_sequences(test_['prompt'])\n \ntokenizer.fit_on_texts(list(test_['response_a']))\ntokenized_rsps_a_te = tokenizer.texts_to_sequences(test_['response_a'])\n\ntokenizer.fit_on_texts(list(test_['response_b']))\ntokenized_rsps_b_te = tokenizer.texts_to_sequences(test_['response_b'])\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:44:23.433039Z","iopub.execute_input":"2024-07-27T19:44:23.433325Z","iopub.status.idle":"2024-07-27T19:44:32.120037Z","shell.execute_reply.started":"2024-07-27T19:44:23.433301Z","shell.execute_reply":"2024-07-27T19:44:32.119251Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"markdown","source":"Next, to make sure all the tokenized sequences are the same length, I'm going to pad them all to the length of the longest sequence. Any sequences shorter than that will be truncated to meet the size requirement.","metadata":{}},{"cell_type":"code","source":"train_.describe()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_.describe()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# padding the sequences for the train data inputs\nX_t_1 = sequence.pad_sequences(tokenized_prmpt_rsps_tr, maxlen=4000)\nX_t_2 = sequence.pad_sequences(tokenized_rsps_a_tr, maxlen=4000)\nX_t_3 = sequence.pad_sequences(tokenized_rsps_b_tr, maxlen=4000)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:44:32.151645Z","iopub.execute_input":"2024-07-27T19:44:32.151954Z","iopub.status.idle":"2024-07-27T19:44:34.090214Z","shell.execute_reply.started":"2024-07-27T19:44:32.151926Z","shell.execute_reply":"2024-07-27T19:44:34.089374Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"# padding the sequences for the test data inputs\nX_test_1 = sequence.pad_sequences(tokenized_prmpt_rsps_te, maxlen=4000)\nX_test_2 = sequence.pad_sequences(tokenized_rsps_a_te, maxlen=4000)\nX_test_3 = sequence.pad_sequences(tokenized_rsps_b_te, maxlen=4000)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:44:34.099589Z","iopub.execute_input":"2024-07-27T19:44:34.099869Z","iopub.status.idle":"2024-07-27T19:44:34.742607Z","shell.execute_reply.started":"2024-07-27T19:44:34.099846Z","shell.execute_reply":"2024-07-27T19:44:34.741607Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"markdown","source":"We need to create a target that includes all three of the outcomes we are trying to predict (winner_model_a, winner_model_b, winner_tie):","metadata":{}},{"cell_type":"code","source":"def target(data):\n    y1 = data.pop('winner_model_a')\n    y1 = np.array(y1)\n    y2 = data.pop('winner_model_b')\n    y2 = np.array(y2)\n    y3 = data.pop('winner_tie')\n    y3 = np.array(y3)\n    return y1, y2, y3\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:44:00.044119Z","iopub.execute_input":"2024-07-27T19:44:00.044414Z","iopub.status.idle":"2024-07-27T19:44:00.049858Z","shell.execute_reply.started":"2024-07-27T19:44:00.044389Z","shell.execute_reply":"2024-07-27T19:44:00.048938Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"#format the outputs for both train and test sets\ntarget_train = target(train_)\ntarget_test = target(test_)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:44:00.050917Z","iopub.execute_input":"2024-07-27T19:44:00.051195Z","iopub.status.idle":"2024-07-27T19:44:00.062924Z","shell.execute_reply.started":"2024-07-27T19:44:00.051172Z","shell.execute_reply":"2024-07-27T19:44:00.062081Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"target_train= np.transpose(target_train)\ntarget_test= np.transpose(target_test)\ntarget_train","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:44:00.064126Z","iopub.execute_input":"2024-07-27T19:44:00.064835Z","iopub.status.idle":"2024-07-27T19:44:00.072397Z","shell.execute_reply.started":"2024-07-27T19:44:00.064802Z","shell.execute_reply":"2024-07-27T19:44:00.071399Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"array([[1, 0, 0],\n       [1, 0, 0],\n       [0, 0, 1],\n       ...,\n       [0, 0, 1],\n       [0, 1, 0],\n       [0, 1, 0]])"},"metadata":{}}]},{"cell_type":"markdown","source":"## Modeling","metadata":{}},{"cell_type":"code","source":"\ni1 = Input(shape=(None,), name=\"prompt\")\n\ni2 = Input(shape=(None,), name=\"response_a\")\n\ni3 = Input(shape=(None,), name=\"response_b\")\n\n\n# Embed each word in the text features into a 200-dimensional vector\nembedding_size = 200\n\nemb1 = layers.Embedding(input_dim = 444901, output_dim = embedding_size, input_length= 4000, mask_zero=True)\nemb_input1 = emb1(i1)\n\nemb2 = layers.Embedding(input_dim = 444901, output_dim = embedding_size,input_length= 4000, mask_zero=True)\nemb_input2 = emb2(i2)\n\nemb3 = layers.Embedding(input_dim = 444901, output_dim = embedding_size, input_length= 4000, mask_zero=True)\nemb_input3 = emb3(i3)\n\n\n# # Reduce sequence of embedded words into a single 128-dimensional vector\nprompt_features = layers.LSTM(128, activation='relu')(emb_input1)\nflatten1 = layers.Flatten()(prompt_features)\nresp_a_features = layers.LSTM(128, activation='relu')(emb_input2)\nflatten2 = layers.Flatten()(resp_a_features)\nresp_b_features = layers.LSTM(128, activation='relu')(emb_input3)\nflatten3 = layers.Flatten()(resp_b_features)\n\nx = layers.concatenate([flatten1, flatten2, flatten3])\n\n\nout1 = layers.Dense(1, name=\"model_a_winner\")(x)\nout2 = layers.Dense(1, name=\"model_b_winner\")(x)\nout3 = layers.Dense(1, activation='softmax', name=\"model_tie\")(x)\n\n# Instantiate an end-to-end model predicting both priority and department\nmodel = keras.Model(\n    inputs=[i1, i2, i3],\n    outputs=[out1, out2, out3],\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:48:54.341749Z","iopub.execute_input":"2024-07-27T19:48:54.342156Z","iopub.status.idle":"2024-07-27T19:48:54.706490Z","shell.execute_reply.started":"2024-07-27T19:48:54.342128Z","shell.execute_reply":"2024-07-27T19:48:54.705532Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"\ni1 = Input(shape=(4000,), name=\"prompt\")\n\ni2 = Input(shape=(4000,), name=\"response_a\")\n\ni3 = Input(shape=(4000,), name=\"response_b\")\n\n\n# Embed each word in the title into a 64-dimensional vector\nembedding_size = 64\n\nemb1 = layers.Embedding(444901, embedding_size, mask_zero=True)\nemb_input1 = emb1(i1)\n\nemb2 = layers.Embedding(444901, embedding_size, mask_zero=True)\nemb_input2 = emb2(i2)\n\nemb3 = layers.Embedding(444901, embedding_size, mask_zero=True)\nemb_input3 = emb3(i3)\n\n\n# # Reduce sequence of embedded words into a single 128-dimensional vector\nprompt_features = layers.Dense(128, activation='relu')(emb_input1)\nflatten1 = layers.Flatten()(prompt_features)\nresp_a_features = layers.Dense(64, activation='relu')(emb_input2)\nflatten2 = layers.Flatten()(resp_a_features)\nresp_b_features = layers.Dense(32, activation='relu')(emb_input3)\nflatten3 = layers.Flatten()(resp_b_features)\n\nx = layers.concatenate([i1, i2, i3])\n\n# Stick a logistic regression for priority prediction on top of the features\nout1 = layers.Dense(1, name=\"model_a_winner\")(x)\nout2 = layers.Dense(1, name=\"model_b_winner\")(x)\nout3 = layers.Dense(1, activation='softmax', name=\"model_tie\")(x)\n\n#out3 = layers.Dense(3, activation='softmax', name=\"outputs\")(x)\n\n# Instantiate an end-to-end model predicting both priority and department\nmodel_1 = keras.Model(\n    inputs=[i1, i2, i3],\n    outputs=[out1, out2, out3],\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:48:58.099681Z","iopub.execute_input":"2024-07-27T19:48:58.100315Z","iopub.status.idle":"2024-07-27T19:48:58.246992Z","shell.execute_reply.started":"2024-07-27T19:48:58.100282Z","shell.execute_reply":"2024-07-27T19:48:58.246047Z"},"trusted":true},"execution_count":56,"outputs":[]},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:49:03.952953Z","iopub.execute_input":"2024-07-27T19:49:03.953594Z","iopub.status.idle":"2024-07-27T19:49:03.997355Z","shell.execute_reply.started":"2024-07-27T19:49:03.953564Z","shell.execute_reply":"2024-07-27T19:49:03.996487Z"},"trusted":true},"execution_count":60,"outputs":[{"name":"stdout","text":"Model: \"model_2\"\n__________________________________________________________________________________________________\n Layer (type)                Output Shape                 Param #   Connected to                  \n==================================================================================================\n prompt (InputLayer)         [(None, None)]               0         []                            \n                                                                                                  \n response_a (InputLayer)     [(None, None)]               0         []                            \n                                                                                                  \n response_b (InputLayer)     [(None, None)]               0         []                            \n                                                                                                  \n embedding_6 (Embedding)     (None, None, 200)            8898020   ['prompt[0][0]']              \n                                                          0                                       \n                                                                                                  \n embedding_7 (Embedding)     (None, None, 200)            8898020   ['response_a[0][0]']          \n                                                          0                                       \n                                                                                                  \n embedding_8 (Embedding)     (None, None, 200)            8898020   ['response_b[0][0]']          \n                                                          0                                       \n                                                                                                  \n lstm_3 (LSTM)               (None, 128)                  168448    ['embedding_6[0][0]']         \n                                                                                                  \n lstm_4 (LSTM)               (None, 128)                  168448    ['embedding_7[0][0]']         \n                                                                                                  \n lstm_5 (LSTM)               (None, 128)                  168448    ['embedding_8[0][0]']         \n                                                                                                  \n flatten_6 (Flatten)         (None, 128)                  0         ['lstm_3[0][0]']              \n                                                                                                  \n flatten_7 (Flatten)         (None, 128)                  0         ['lstm_4[0][0]']              \n                                                                                                  \n flatten_8 (Flatten)         (None, 128)                  0         ['lstm_5[0][0]']              \n                                                                                                  \n concatenate_2 (Concatenate  (None, 384)                  0         ['flatten_6[0][0]',           \n )                                                                   'flatten_7[0][0]',           \n                                                                     'flatten_8[0][0]']           \n                                                                                                  \n model_a_winner (Dense)      (None, 1)                    385       ['concatenate_2[0][0]']       \n                                                                                                  \n model_b_winner (Dense)      (None, 1)                    385       ['concatenate_2[0][0]']       \n                                                                                                  \n model_tie (Dense)           (None, 1)                    385       ['concatenate_2[0][0]']       \n                                                                                                  \n==================================================================================================\nTotal params: 267447099 (1020.23 MB)\nTrainable params: 267447099 (1020.23 MB)\nNon-trainable params: 0 (0.00 Byte)\n__________________________________________________________________________________________________\n","output_type":"stream"}]},{"cell_type":"code","source":"keras.utils.plot_model(model, show_shapes=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:49:07.911598Z","iopub.execute_input":"2024-07-27T19:49:07.912429Z","iopub.status.idle":"2024-07-27T19:49:08.045186Z","shell.execute_reply.started":"2024-07-27T19:49:07.912396Z","shell.execute_reply":"2024-07-27T19:49:08.044313Z"},"trusted":true},"execution_count":61,"outputs":[{"execution_count":61,"output_type":"execute_result","data":{"image/png":"","text/plain":"<IPython.core.display.Image object>"},"metadata":{}}]},{"cell_type":"code","source":"\nmodel.compile(optimizer='adam', \n              loss = (from_logits=True),\n              metrics=[keras.metrics.BinaryAccuracy(),\n             )","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:49:16.596332Z","iopub.execute_input":"2024-07-27T19:49:16.597202Z","iopub.status.idle":"2024-07-27T19:49:16.609714Z","shell.execute_reply.started":"2024-07-27T19:49:16.597167Z","shell.execute_reply":"2024-07-27T19:49:16.608831Z"},"trusted":true},"execution_count":62,"outputs":[]},{"cell_type":"code","source":"\nmodel_1.compile(optimizer='adam', \n              loss = ['binary_crossentropy', 'binary_crossentropy', 'binary_crossentropy'],\n#               metrics = 'accuracy'\n             )","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:49:16.792466Z","iopub.execute_input":"2024-07-27T19:49:16.793185Z","iopub.status.idle":"2024-07-27T19:49:16.804196Z","shell.execute_reply.started":"2024-07-27T19:49:16.793159Z","shell.execute_reply":"2024-07-27T19:49:16.803292Z"},"trusted":true},"execution_count":63,"outputs":[]},{"cell_type":"code","source":"y_train = np.asarray(target_train).astype('float32').reshape((-1,1))\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:49:18.334953Z","iopub.execute_input":"2024-07-27T19:49:18.335621Z","iopub.status.idle":"2024-07-27T19:49:18.341576Z","shell.execute_reply.started":"2024-07-27T19:49:18.335587Z","shell.execute_reply":"2024-07-27T19:49:18.340654Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"code","source":"y_test = np.asarray(target_test).astype('float32').reshape((-1,1))","metadata":{"execution":{"iopub.status.busy":"2024-07-27T21:49:26.580112Z","iopub.execute_input":"2024-07-27T21:49:26.580954Z","iopub.status.idle":"2024-07-27T21:49:26.585857Z","shell.execute_reply.started":"2024-07-27T21:49:26.580920Z","shell.execute_reply":"2024-07-27T21:49:26.584761Z"},"trusted":true},"execution_count":75,"outputs":[]},{"cell_type":"code","source":"target_test","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.fit(\n    [X_t_1, X_t_2, X_t_3], y_train,\n    epochs=1,\n    batch_size=100,\n    validation_split=0.2\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T19:49:19.427705Z","iopub.execute_input":"2024-07-27T19:49:19.428529Z","iopub.status.idle":"2024-07-27T21:45:48.406389Z","shell.execute_reply.started":"2024-07-27T19:49:19.428499Z","shell.execute_reply":"2024-07-27T21:45:48.405379Z"},"trusted":true},"execution_count":65,"outputs":[{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1722109776.116497     136 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"343/343 [==============================] - 6987s 20s/step - loss: 1.9459 - model_a_winner_loss: 0.6508 - model_b_winner_loss: 0.6523 - model_tie_loss: 0.6428 - val_loss: 1.9148 - val_model_a_winner_loss: 0.6388 - val_model_b_winner_loss: 0.6390 - val_model_tie_loss: 0.6369\n","output_type":"stream"},{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"<keras.src.callbacks.History at 0x7f072e5a6200>"},"metadata":{}}]},{"cell_type":"code","source":"# # Unfreeze the base_model. Note that it keeps running in inference mode\n# # since we passed `training=False` when calling it. This means that\n# # the batchnorm layers will not update their batch statistics.\n# # This prevents the batchnorm layers from undoing all the training\n# # we've done so far.\n# base_model.trainable = True\n# model.summary()\n\n# model.compile(\n#     optimizer=keras.optimizers.Adam(1e-5),  # Low learning rate\n#     loss=keras.losses.BinaryCrossentropy(from_logits=True),\n#     metrics=[keras.metrics.BinaryAccuracy()],\n# )\n\n# epochs = 10\n# model.fit(train_ds, epochs=epochs, validation_data=validation_ds)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T21:51:57.703433Z","iopub.execute_input":"2024-07-27T21:51:57.704166Z","iopub.status.idle":"2024-07-27T21:51:57.708402Z","shell.execute_reply.started":"2024-07-27T21:51:57.704134Z","shell.execute_reply":"2024-07-27T21:51:57.707533Z"},"trusted":true},"execution_count":85,"outputs":[]},{"cell_type":"code","source":"# model_1.fit(\n#     [X_t_1, X_t_2, X_t_3],\n#     y_train,\n#     epochs=1,\n#     batch_size=64,\n#     validation_split=0.2\n# )","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.evaluate([X_test_1, X_test_2, X_test_3], y_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-27T21:51:38.729563Z","iopub.execute_input":"2024-07-27T21:51:38.729920Z","iopub.status.idle":"2024-07-27T21:51:39.569526Z","shell.execute_reply.started":"2024-07-27T21:51:38.729894Z","shell.execute_reply":"2024-07-27T21:51:39.568172Z"},"trusted":true},"execution_count":84,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[84], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mevaluate\u001b[49m\u001b[43m(\u001b[49m\u001b[43m[\u001b[49m\u001b[43mX_test_1\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX_test_2\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX_test_3\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_test\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py:70\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     67\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m     68\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[1;32m     69\u001b[0m     \u001b[38;5;66;03m# `tf.debugging.disable_traceback_filtering()`\u001b[39;00m\n\u001b[0;32m---> 70\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m     71\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m     72\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/engine/data_adapter.py:1960\u001b[0m, in \u001b[0;36m_check_data_cardinality\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m   1953\u001b[0m     msg \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m  \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m sizes: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\n\u001b[1;32m   1954\u001b[0m         label,\n\u001b[1;32m   1955\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mjoin(\n\u001b[1;32m   1956\u001b[0m             \u001b[38;5;28mstr\u001b[39m(i\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m]) \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m tf\u001b[38;5;241m.\u001b[39mnest\u001b[38;5;241m.\u001b[39mflatten(single_data)\n\u001b[1;32m   1957\u001b[0m         ),\n\u001b[1;32m   1958\u001b[0m     )\n\u001b[1;32m   1959\u001b[0m msg \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mMake sure all arrays contain the same number of samples.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m-> 1960\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg)\n","\u001b[0;31mValueError\u001b[0m: Data cardinality is ambiguous:\n  x sizes: 14280, 14280, 14280\n  y sizes: 42840\nMake sure all arrays contain the same number of samples."],"ename":"ValueError","evalue":"Data cardinality is ambiguous:\n  x sizes: 14280, 14280, 14280\n  y sizes: 42840\nMake sure all arrays contain the same number of samples.","output_type":"error"}]},{"cell_type":"code","source":"print(\"val. score: %s\" % opt.best_score_)\nprint(\"test score: %s\" % opt.score(X_test, y_test))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"np.shape(X_test_1)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T21:48:04.776777Z","iopub.execute_input":"2024-07-27T21:48:04.777123Z","iopub.status.idle":"2024-07-27T21:48:04.782997Z","shell.execute_reply.started":"2024-07-27T21:48:04.777096Z","shell.execute_reply":"2024-07-27T21:48:04.782029Z"},"trusted":true},"execution_count":71,"outputs":[{"execution_count":71,"output_type":"execute_result","data":{"text/plain":"(14280, 4000)"},"metadata":{}}]},{"cell_type":"code","source":"np.shape(X_t_1)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T21:50:35.960997Z","iopub.execute_input":"2024-07-27T21:50:35.961351Z","iopub.status.idle":"2024-07-27T21:50:35.967494Z","shell.execute_reply.started":"2024-07-27T21:50:35.961324Z","shell.execute_reply":"2024-07-27T21:50:35.966537Z"},"trusted":true},"execution_count":79,"outputs":[{"execution_count":79,"output_type":"execute_result","data":{"text/plain":"(42839, 4000)"},"metadata":{}}]},{"cell_type":"code","source":"np.shape(y_train)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T21:50:48.209985Z","iopub.execute_input":"2024-07-27T21:50:48.210321Z","iopub.status.idle":"2024-07-27T21:50:48.216332Z","shell.execute_reply.started":"2024-07-27T21:50:48.210296Z","shell.execute_reply":"2024-07-27T21:50:48.215403Z"},"trusted":true},"execution_count":80,"outputs":[{"execution_count":80,"output_type":"execute_result","data":{"text/plain":"(128517, 1)"},"metadata":{}}]},{"cell_type":"code","source":"np.transpose(y_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T21:51:34.919195Z","iopub.execute_input":"2024-07-27T21:51:34.919563Z","iopub.status.idle":"2024-07-27T21:51:34.926345Z","shell.execute_reply.started":"2024-07-27T21:51:34.919536Z","shell.execute_reply":"2024-07-27T21:51:34.925258Z"},"trusted":true},"execution_count":83,"outputs":[{"execution_count":83,"output_type":"execute_result","data":{"text/plain":"array([[0., 1., 0., ..., 1., 0., 0.]], dtype=float32)"},"metadata":{}}]},{"cell_type":"code","source":"np.shape(target_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T21:48:35.375189Z","iopub.execute_input":"2024-07-27T21:48:35.375550Z","iopub.status.idle":"2024-07-27T21:48:35.381609Z","shell.execute_reply.started":"2024-07-27T21:48:35.375523Z","shell.execute_reply":"2024-07-27T21:48:35.380625Z"},"trusted":true},"execution_count":73,"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"(14280, 3)"},"metadata":{}}]},{"cell_type":"code","source":"# Generate predictions\npredictions = model.predict([X_test_1, X_test_2, X_test_3])","metadata":{"execution":{"iopub.status.busy":"2024-07-27T21:54:01.184567Z","iopub.execute_input":"2024-07-27T21:54:01.185454Z","iopub.status.idle":"2024-07-27T22:09:07.550865Z","shell.execute_reply.started":"2024-07-27T21:54:01.185421Z","shell.execute_reply":"2024-07-27T22:09:07.549889Z"},"trusted":true},"execution_count":86,"outputs":[{"name":"stdout","text":"447/447 [==============================] - 905s 2s/step\n","output_type":"stream"}]},{"cell_type":"code","source":"predictions = np.transpose(predictions)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T22:10:26.603377Z","iopub.execute_input":"2024-07-27T22:10:26.604281Z","iopub.status.idle":"2024-07-27T22:10:26.608809Z","shell.execute_reply.started":"2024-07-27T22:10:26.604249Z","shell.execute_reply":"2024-07-27T22:10:26.607798Z"},"trusted":true},"execution_count":90,"outputs":[]},{"cell_type":"code","source":"np.shape(predictions)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T22:11:30.667166Z","iopub.execute_input":"2024-07-27T22:11:30.667442Z","iopub.status.idle":"2024-07-27T22:11:30.673224Z","shell.execute_reply.started":"2024-07-27T22:11:30.667419Z","shell.execute_reply":"2024-07-27T22:11:30.672293Z"},"trusted":true},"execution_count":99,"outputs":[{"execution_count":99,"output_type":"execute_result","data":{"text/plain":"(1, 14280, 3)"},"metadata":{}}]},{"cell_type":"code","source":"predictions","metadata":{"execution":{"iopub.status.busy":"2024-07-27T22:11:51.472072Z","iopub.execute_input":"2024-07-27T22:11:51.472761Z","iopub.status.idle":"2024-07-27T22:11:51.481246Z","shell.execute_reply.started":"2024-07-27T22:11:51.472716Z","shell.execute_reply":"2024-07-27T22:11:51.480078Z"},"trusted":true},"execution_count":100,"outputs":[{"execution_count":100,"output_type":"execute_result","data":{"text/plain":"array([[[0.29261073, 0.30020723, 1.        ],\n        [0.28878123, 0.2895835 , 1.        ],\n        [0.33729848, 0.3371132 , 1.        ],\n        ...,\n        [0.30849963, 0.29656118, 1.        ],\n        [0.3311317 , 0.32379788, 1.        ],\n        [0.23870687, 0.22208072, 1.        ]]], dtype=float32)"},"metadata":{}}]},{"cell_type":"code","source":"# Save model\nmodel.save('./model_multi_in_out1/', save_format='tf')","metadata":{"execution":{"iopub.status.busy":"2024-07-27T22:12:12.462984Z","iopub.execute_input":"2024-07-27T22:12:12.463715Z","iopub.status.idle":"2024-07-27T22:12:25.627672Z","shell.execute_reply.started":"2024-07-27T22:12:12.463684Z","shell.execute_reply":"2024-07-27T22:12:25.626804Z"},"trusted":true},"execution_count":101,"outputs":[]},{"cell_type":"code","source":"# Restore model\nloaded_model = tf.keras.models.load_model('./model_multi_in_out1/')","metadata":{"execution":{"iopub.status.busy":"2024-07-27T22:12:36.230903Z","iopub.execute_input":"2024-07-27T22:12:36.231766Z","iopub.status.idle":"2024-07-27T22:12:40.420000Z","shell.execute_reply.started":"2024-07-27T22:12:36.231729Z","shell.execute_reply":"2024-07-27T22:12:40.419236Z"},"trusted":true},"execution_count":103,"outputs":[]},{"cell_type":"code","source":"# Run predict with restored model\npredictions = loaded_model.predict([X_test_1, X_test_2, X_test_3])\n# price_pred = predictions[0]\n# ptratio_pred = predictions[1]","metadata":{"execution":{"iopub.status.busy":"2024-07-27T22:12:46.346339Z","iopub.execute_input":"2024-07-27T22:12:46.346702Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"  6/447 [..............................] - ETA: 14:42","output_type":"stream"}]},{"cell_type":"code","source":"def plot_diff(y_true, y_pred, title=''):\n    plt.scatter(y_true, y_pred)\n    plt.title(title)\n    plt.xlabel('True Values')\n    plt.ylabel('Predictions')\n    plt.axis('equal')\n    plt.axis('square')\n    plt.xlim(plt.xlim())\n    plt.ylim(plt.ylim())\n    plt.plot([-100, 100], [-100, 100])\n    plt.show()\n\n\ndef plot_metrics(metric_name, title, ylim=5):\n    plt.title(title)\n    plt.ylim(0, ylim)\n    plt.plot(history.history[metric_name], color='blue', label=metric_name)\n    plt.plot(history.history['val_' + metric_name], color='green', label='val_' + metric_name)\n    plt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Run predict\nY_pred = model.predict(norm_test_X)\nprice_pred = Y_pred[0]\nptratio_pred = Y_pred[1]\n\nplot_diff(test_Y[0], Y_pred[0], title='PRICE')\nplot_diff(test_Y[1], Y_pred[1], title='PTRATIO')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"preds_t = np.transpose(predictions)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T22:10:57.751961Z","iopub.execute_input":"2024-07-27T22:10:57.752769Z","iopub.status.idle":"2024-07-27T22:10:57.756693Z","shell.execute_reply.started":"2024-07-27T22:10:57.752730Z","shell.execute_reply":"2024-07-27T22:10:57.755775Z"},"trusted":true},"execution_count":97,"outputs":[]},{"cell_type":"code","source":"np.sum(preds_t, axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T22:10:57.997935Z","iopub.execute_input":"2024-07-27T22:10:57.998393Z","iopub.status.idle":"2024-07-27T22:10:58.004848Z","shell.execute_reply.started":"2024-07-27T22:10:57.998369Z","shell.execute_reply":"2024-07-27T22:10:58.003902Z"},"trusted":true},"execution_count":98,"outputs":[{"execution_count":98,"output_type":"execute_result","data":{"text/plain":"array([[ 4550.707 ],\n       [ 4534.0566],\n       [14280.    ]], dtype=float32)"},"metadata":{}}]},{"cell_type":"code","source":"np.shape(predictions)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"____","metadata":{}},{"cell_type":"markdown","source":"Modeling attempt for single, combined input feature:","metadata":{}},{"cell_type":"code","source":"# train_size = int(len(train_cleaned) * .8)\n# labels = target_t\n\n# text_train =  train_cleaned['combined_text'][:train_size]\n\n# labels_train = labels[:train_size]\n\n# labels_test = labels[train_size:]\n\n# text_test =  train_cleaned['combined_text'][train_size:]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The text features need to be tokenized so that they can be interpreted by our model:","metadata":{}},{"cell_type":"code","source":"#tokenize\ntokenizer = text.Tokenizer(num_words=20000)\ntokenizer.fit_on_texts(list(text_train))\nlist_tokenized_prmpt_rsps = tokenizer.texts_to_sequences(text_train)\nX_t = sequence.pad_sequences(list_tokenized_prmpt_rsps, maxlen=1000)\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"tokenizer.fit_on_texts(list(text_test))\nlist_tokenized_prmpt_rsps_test = tokenizer.texts_to_sequences(text_test)\nX_t_test = sequence.pad_sequences(list_tokenized_prmpt_rsps_test, maxlen=1000)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # main approach, unsure of model architecture\n# input_layer = Input(shape=(len(np.transpose(X_t)),))\n# embedding_size = 128\n# embedding = layers.Embedding(20000, embedding_size)\n# encoded_input = embedding(input_layer)\n\n# first_dense = Dense(units=128, activation='relu')(input_layer)\n# second_dense = Dense(units=128, activation='relu')(first_dense)\n\n# y1_output = Dense(units=3, name='y1_output')(second_dense)\n# third_dense = Dense(units=64, activation='relu')(second_dense)\n\n# y2_output = Dense(units=3, name='y2_output')(third_dense)\n# fourth_dense = Dense(units=32, activation='relu')(third_dense)\n\n# y3_output = Dense(units=3, name='y3_output')(fourth_dense)\n# out = Softmax(axis=-1)(y3_output)\n\n# model_a = Model(inputs=input_layer, outputs=out)\n# #[y1_output, y2_output, y3_output]\n\n# print(model_a.summary())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# main approach, unsure of model architecture\ninput_layer = Input(shape=(len(np.transpose(X_t)),))\nembedding_size = 128\nembedding = layers.Embedding(20000, embedding_size)\nemb_input = embedding(input_layer)\n\nfirst_dense = Dense(units=128, activation='relu')(input_layer)\nsecond_dense = Dense(units=128, activation='relu')(first_dense)\n\ny1_output = Dense(units=1, name='y1_output')(second_dense)\nthird_dense = Dense(units=64, activation='relu')(second_dense)\n\ny2_output = Dense(units=1, name='y2_output')(third_dense)\nfourth_dense = Dense(units=32, activation='relu')(third_dense)\n\ny3_output = Dense(units=1, name='y3_output')(fourth_dense)\nx = layers.concatenate([y1_output, y2_output, y3_output])\nout = Softmax(axis=-1)(x)\n\nmodel_b = Model(inputs=emb_input, outputs=out)\n#[y1_output, y2_output, y3_output]\n\nprint(model_b.summary())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # num_tags = 12  # Number of unique issue tags\n# # num_words = 10000  # Size of vocabulary obtained when preprocessing text data\n# # num_departments = 4  # Number of departments for predictions\n\n# prompt_input = keras.Input(\n#     shape=(None,), name=\"prompt\"\n# )  # Variable-length sequence of ints\n# resp_a_input = keras.Input(shape=(None,), name=\"resp_a\")  # Variable-length sequence of ints\n# resp_b_input = keras.Input(\n#     shape=(None,), name=\"resp_b\"\n# )  # Binary vectors of size `num_tags`\n# # train_cleaned['combined_text']\n# # input_layer = Input(shape=(len(np.transpose(X_t)),))\n\n# # Embed each word in the title into a 64-dimensional vector\n# prompt_features = layers.Embedding(2000, 64)(prompt_input)\n# # Embed each word in the text into a 64-dimensional vector\n# resp_a_features = layers.Embedding(2000, 64)(resp_a_input)\n# resp_b_features = layers.Embedding(2000, 64)(resp_b_input)\n\n\n# # Reduce sequence of embedded words in the title into a single 128-dimensional vector\n# prompt_features = layers.LSTM(128)(prompt_features)\n# # Reduce sequence of embedded words in the body into a single 32-dimensional vector\n# resp_a_features = layers.LSTM(32)(resp_a_features)\n# resp_b_features = layers.LSTM(32)(resp_b_features)\n\n# # Merge all available features into a single large vector via concatenation\n# x = layers.concatenate([prompt_features, resp_a_features, resp_b_features])\n\n# # Stick a logistic regression for priority prediction on top of the features\n# a_win_pred = layers.Dense(1, name=\"winner_a\", activation = \"softmax\")(x)\n# # Stick a department classifier on top of the features\n# b_win_pred = layers.Dense(1, name=\"winner_b\", activation = \"softmax\")(x)\n# tie_pred = layers.Dense(1, name=\"tie\", activation = \"softmax\")(x)\n# # softmax = layers.Softmax(axis=-1)(x)\n\n# # Instantiate an end-to-end model predicting both priority and department\n# model_c = keras.Model(\n#     inputs=[prompt_features, resp_a_features, resp_b_features],\n#     outputs=[a_win_pred, b_win_pred, tie_pred],\n# )","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_b.compile(optimizer='adam', \n              loss=['BinaryCrossentropy',\n                   'BinaryCrossentropy',\n                   'BinaryCrossentropy'])\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_b.fit(\n    X_t, labels_train,\n    epochs=10,\n    batch_size=32,\n    validation_split=0.2\n)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_b.evaluate(X_t_test, labels_test)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # Generate predictions\npredictions = model_b.predict(X_t_test)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions[:15]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"preds_sum=np.sum(predictions, axis=1)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"preds_sum[:20]","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}