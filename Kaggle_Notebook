{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceType":"competition","sourceId":66631,"databundleVersionId":8346466}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Kaggle Competition Notebook:\"LMSYS - Chatbot Arena Human Preference Predictions\"","metadata":{}},{"cell_type":"markdown","source":"In this notebook, I am conducting data exploration, analysis, and modeling in order to generate predictions for which Chatbot model will be preferred for a given prompt.","metadata":{}},{"cell_type":"markdown","source":"## Data Loading and Exploration","metadata":{}},{"cell_type":"markdown","source":"First, import necessary packages, and connect to kaggle to import competition dataset:","metadata":{}},{"cell_type":"code","source":"# import tensorflow as tf\n# # Detect hardware, return appropriate distribution strategy\n# # try:\n#     tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n#     print('Running on TPU ', tpu.master())\n# except ValueError:\n#     tpu = None\n\n# if tpu:\n#     tf.config.experimental_connect_to_cluster(tpu)\n#     tf.tpu.experimental.initialize_tpu_system(tpu)\n#     strategy = tf.distribute.experimental.TPUStrategy(tpu)\n# else:\n#     strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\n# print(\"REPLICAS: \", strategy.num_replicas_in_sync)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:28:39.459453Z","iopub.execute_input":"2024-07-28T12:28:39.459836Z","iopub.status.idle":"2024-07-28T12:28:39.465399Z","shell.execute_reply.started":"2024-07-28T12:28:39.459804Z","shell.execute_reply":"2024-07-28T12:28:39.464524Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"\n\n# # detect and init the TPU\n# tpu = distribute.cluster_resolver.TPUClusterResolver()\n\n# # instantiate a distribution strategy\n# tf.tpu.experimental.initialize_tpu_system(tpu)\n# tpu_strategy = tf.distribute.TPUStrategy(tpu)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:28:39.467075Z","iopub.execute_input":"2024-07-28T12:28:39.467377Z","iopub.status.idle":"2024-07-28T12:28:39.475821Z","shell.execute_reply.started":"2024-07-28T12:28:39.467354Z","shell.execute_reply":"2024-07-28T12:28:39.474920Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-28T12:28:39.487716Z","iopub.execute_input":"2024-07-28T12:28:39.487999Z","iopub.status.idle":"2024-07-28T12:28:39.859009Z","shell.execute_reply.started":"2024-07-28T12:28:39.487959Z","shell.execute_reply":"2024-07-28T12:28:39.858056Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"/kaggle/input/lmsys-chatbot-arena/sample_submission.csv\n/kaggle/input/lmsys-chatbot-arena/train.csv\n/kaggle/input/lmsys-chatbot-arena/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport math\nimport seaborn as sns\nsns.set(font_scale=2)\n# from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n# from sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier, RandomForestClassifier\n# from sklearn.metrics import precision_score, accuracy_score, f1_score, confusion_matrix, classification_report, roc_curve, auc, ConfusionMatrixDisplay\n# from sklearn.tree import DecisionTreeClassifier\n# from sklearn import tree\n# from sklearn.neighbors import KNeighborsClassifier\nimport nltk\nnltk.download('punkt')\nfrom nltk.corpus import stopwords\nimport re\nfrom nltk.tokenize import RegexpTokenizer, word_tokenize\nfrom sklearn.metrics import log_loss\nfrom sklearn.pipeline import Pipeline\nfrom sklearn import feature_extraction, linear_model, model_selection, preprocessing\n# from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer, TfidfTransformer\n# from nltk import FreqDist\n# from sklearn.naive_bayes import MultinomialNB\n# from nltk.stem.snowball import SnowballStemmer\n# from sklearn.model_selection import GridSearchCV\n# from sklearn.multioutput import MultiOutputClassifier\n\n# from gensim.models import word2vec","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:28:39.860926Z","iopub.execute_input":"2024-07-28T12:28:39.861428Z","iopub.status.idle":"2024-07-28T12:29:01.132362Z","shell.execute_reply.started":"2024-07-28T12:28:39.861393Z","shell.execute_reply":"2024-07-28T12:29:01.131389Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"[nltk_data] Error loading punkt: <urlopen error [Errno -3] Temporary\n[nltk_data]     failure in name resolution>\n","output_type":"stream"}]},{"cell_type":"code","source":"# pip install --upgrade pip","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:01.133636Z","iopub.execute_input":"2024-07-28T12:29:01.133980Z","iopub.status.idle":"2024-07-28T12:29:01.138525Z","shell.execute_reply.started":"2024-07-28T12:29:01.133947Z","shell.execute_reply":"2024-07-28T12:29:01.137484Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# !pip install keras==2.15.0","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:01.140799Z","iopub.execute_input":"2024-07-28T12:29:01.141102Z","iopub.status.idle":"2024-07-28T12:29:01.148323Z","shell.execute_reply.started":"2024-07-28T12:29:01.141075Z","shell.execute_reply":"2024-07-28T12:29:01.147374Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# from tensorflow import keras\nimport keras\n# import keras_nlp\nimport tensorflow as tf\n","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:01.149342Z","iopub.execute_input":"2024-07-28T12:29:01.149575Z","iopub.status.idle":"2024-07-28T12:29:11.928381Z","shell.execute_reply.started":"2024-07-28T12:29:01.149554Z","shell.execute_reply":"2024-07-28T12:29:11.927373Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stderr","text":"2024-07-28 12:29:02.633961: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-07-28 12:29:02.634083: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-07-28 12:29:02.739035: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"from keras.models import Model\n\nfrom keras.layers import Dense, Input\n\nfrom tqdm.auto import tqdm\n\nfrom keras.layers import TextVectorization\n# from keras import Sequential\nfrom keras.layers import Dense, Embedding, GlobalAveragePooling1D\n\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Input, Dense, LSTM, Embedding\nfrom keras.layers import Softmax\nfrom keras.layers import Dropout, Activation, Bidirectional, GlobalMaxPool1D\nfrom keras.models import Sequential\nfrom keras import initializers, regularizers, constraints, optimizers, layers\nfrom keras.preprocessing import sequence","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:11.929942Z","iopub.execute_input":"2024-07-28T12:29:11.930853Z","iopub.status.idle":"2024-07-28T12:29:11.950588Z","shell.execute_reply.started":"2024-07-28T12:29:11.930809Z","shell.execute_reply":"2024-07-28T12:29:11.949663Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"Loading and exploring the train and test datasets:","metadata":{}},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/lmsys-chatbot-arena/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/lmsys-chatbot-arena/test.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:11.951868Z","iopub.execute_input":"2024-07-28T12:29:11.952266Z","iopub.status.idle":"2024-07-28T12:29:15.608872Z","shell.execute_reply.started":"2024-07-28T12:29:11.952221Z","shell.execute_reply":"2024-07-28T12:29:15.607849Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:15.610396Z","iopub.execute_input":"2024-07-28T12:29:15.610713Z","iopub.status.idle":"2024-07-28T12:29:15.633799Z","shell.execute_reply.started":"2024-07-28T12:29:15.610687Z","shell.execute_reply":"2024-07-28T12:29:15.632706Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"       id             model_a              model_b  \\\n0   30192  gpt-4-1106-preview           gpt-4-0613   \n1   53567           koala-13b           gpt-4-0613   \n2   65089  gpt-3.5-turbo-0613       mistral-medium   \n3   96401    llama-2-13b-chat  mistral-7b-instruct   \n4  198779           koala-13b   gpt-3.5-turbo-0314   \n\n                                              prompt  \\\n0  [\"Is it morally right to try to have a certain...   \n1  [\"What is the difference between marriage lice...   \n2  [\"explain function calling. how would you call...   \n3  [\"How can I create a test set for a very rare ...   \n4  [\"What is the best way to travel from Tel-Aviv...   \n\n                                          response_a  \\\n0  [\"The question of whether it is morally right ...   \n1  [\"A marriage license is a legal document that ...   \n2  [\"Function calling is the process of invoking ...   \n3  [\"Creating a test set for a very rare category...   \n4  [\"The best way to travel from Tel Aviv to Jeru...   \n\n                                          response_b  winner_model_a  \\\n0  [\"As an AI, I don't have personal beliefs or o...               1   \n1  [\"A marriage license and a marriage certificat...               0   \n2  [\"Function calling is the process of invoking ...               0   \n3  [\"When building a classifier for a very rare c...               1   \n4  [\"The best way to travel from Tel-Aviv to Jeru...               0   \n\n   winner_model_b  winner_tie  \n0               0           0  \n1               1           0  \n2               0           1  \n3               0           0  \n4               1           0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>model_a</th>\n      <th>model_b</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>gpt-4-1106-preview</td>\n      <td>gpt-4-0613</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>koala-13b</td>\n      <td>gpt-4-0613</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>gpt-3.5-turbo-0613</td>\n      <td>mistral-medium</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>llama-2-13b-chat</td>\n      <td>mistral-7b-instruct</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>koala-13b</td>\n      <td>gpt-3.5-turbo-0314</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:15.635248Z","iopub.execute_input":"2024-07-28T12:29:15.635723Z","iopub.status.idle":"2024-07-28T12:29:15.646491Z","shell.execute_reply.started":"2024-07-28T12:29:15.635691Z","shell.execute_reply":"2024-07-28T12:29:15.645379Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"        id                                             prompt  \\\n0   136060  [\"I have three oranges today, I ate an orange ...   \n1   211333  [\"You are a mediator in a heated political deb...   \n2  1233961  [\"How to initialize the classification head wh...   \n\n                                          response_a  \\\n0                    [\"You have two oranges today.\"]   \n1  [\"Thank you for sharing the details of the sit...   \n2  [\"When you want to initialize the classificati...   \n\n                                          response_b  \n0  [\"You still have three oranges. Eating an oran...  \n1  [\"Mr Reddy and Ms Blue both have valid points ...  \n2  [\"To initialize the classification head when p...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>136060</td>\n      <td>[\"I have three oranges today, I ate an orange ...</td>\n      <td>[\"You have two oranges today.\"]</td>\n      <td>[\"You still have three oranges. Eating an oran...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>211333</td>\n      <td>[\"You are a mediator in a heated political deb...</td>\n      <td>[\"Thank you for sharing the details of the sit...</td>\n      <td>[\"Mr Reddy and Ms Blue both have valid points ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1233961</td>\n      <td>[\"How to initialize the classification head wh...</td>\n      <td>[\"When you want to initialize the classificati...</td>\n      <td>[\"To initialize the classification head when p...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:15.651000Z","iopub.execute_input":"2024-07-28T12:29:15.651360Z","iopub.status.idle":"2024-07-28T12:29:15.718186Z","shell.execute_reply.started":"2024-07-28T12:29:15.651321Z","shell.execute_reply":"2024-07-28T12:29:15.717234Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 57477 entries, 0 to 57476\nData columns (total 9 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   id              57477 non-null  int64 \n 1   model_a         57477 non-null  object\n 2   model_b         57477 non-null  object\n 3   prompt          57477 non-null  object\n 4   response_a      57477 non-null  object\n 5   response_b      57477 non-null  object\n 6   winner_model_a  57477 non-null  int64 \n 7   winner_model_b  57477 non-null  int64 \n 8   winner_tie      57477 non-null  int64 \ndtypes: int64(4), object(5)\nmemory usage: 3.9+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"train.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:15.719451Z","iopub.execute_input":"2024-07-28T12:29:15.720034Z","iopub.status.idle":"2024-07-28T12:29:15.750753Z","shell.execute_reply.started":"2024-07-28T12:29:15.719997Z","shell.execute_reply":"2024-07-28T12:29:15.749921Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"                 id  winner_model_a  winner_model_b    winner_tie\ncount  5.747700e+04    57477.000000    57477.000000  57477.000000\nmean   2.142564e+09        0.349079        0.341911      0.309011\nstd    1.238327e+09        0.476683        0.474354      0.462090\nmin    3.019200e+04        0.000000        0.000000      0.000000\n25%    1.071821e+09        0.000000        0.000000      0.000000\n50%    2.133658e+09        0.000000        0.000000      0.000000\n75%    3.211645e+09        1.000000        1.000000      1.000000\nmax    4.294947e+09        1.000000        1.000000      1.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5.747700e+04</td>\n      <td>57477.000000</td>\n      <td>57477.000000</td>\n      <td>57477.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2.142564e+09</td>\n      <td>0.349079</td>\n      <td>0.341911</td>\n      <td>0.309011</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.238327e+09</td>\n      <td>0.476683</td>\n      <td>0.474354</td>\n      <td>0.462090</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>3.019200e+04</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.071821e+09</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2.133658e+09</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>3.211645e+09</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>4.294947e+09</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"I'm interested to see what models are winning most often in the datasets:","metadata":{}},{"cell_type":"code","source":"winner_a = train[train['winner_model_a']==True]","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:15.751907Z","iopub.execute_input":"2024-07-28T12:29:15.752200Z","iopub.status.idle":"2024-07-28T12:29:15.761755Z","shell.execute_reply.started":"2024-07-28T12:29:15.752176Z","shell.execute_reply":"2024-07-28T12:29:15.760752Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"winner_b = train[train['winner_model_b']==True]","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:15.762960Z","iopub.execute_input":"2024-07-28T12:29:15.763272Z","iopub.status.idle":"2024-07-28T12:29:15.771803Z","shell.execute_reply.started":"2024-07-28T12:29:15.763247Z","shell.execute_reply":"2024-07-28T12:29:15.770859Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"winner_a['model_a'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:15.772863Z","iopub.execute_input":"2024-07-28T12:29:15.773159Z","iopub.status.idle":"2024-07-28T12:29:15.785293Z","shell.execute_reply.started":"2024-07-28T12:29:15.773137Z","shell.execute_reply":"2024-07-28T12:29:15.784199Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"model_a\ngpt-4-1106-preview          2019\ngpt-4-0613                  1280\ngpt-3.5-turbo-0613          1213\ngpt-4-0314                  1033\nclaude-2.1                   896\n                            ... \nchatglm2-6b                   35\nqwen1.5-7b-chat               29\nopenchat-3.5-0106             28\nqwen1.5-4b-chat               19\nmistral-7b-instruct-v0.2      15\nName: count, Length: 64, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"winner_b['model_b'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:15.786761Z","iopub.execute_input":"2024-07-28T12:29:15.787648Z","iopub.status.idle":"2024-07-28T12:29:15.801101Z","shell.execute_reply.started":"2024-07-28T12:29:15.787615Z","shell.execute_reply":"2024-07-28T12:29:15.800032Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"model_b\ngpt-4-1106-preview          2054\ngpt-4-0613                  1170\ngpt-3.5-turbo-0613          1168\ngpt-4-0314                   960\nclaude-1                     880\n                            ... \nchatglm2-6b                   38\nopenchat-3.5-0106             35\nqwen1.5-7b-chat               22\nqwen1.5-4b-chat               16\nmistral-7b-instruct-v0.2      12\nName: count, Length: 64, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"The top 4 models that won most often as model a or as model b are:\n- gpt-4-1106-preview\n- gpt-4-0613\n- gpt-3.5-turbo-0613\n- gpt-4-0314","metadata":{}},{"cell_type":"markdown","source":"## Data Preparation","metadata":{}},{"cell_type":"markdown","source":"Since the 'prompt', 'response_a', and 'response_b' features are text, they need to be cleaned:","metadata":{}},{"cell_type":"code","source":"# Creating a function to perform cleaning steps at once (Removes numbers and unnecessary characters, makes all letters lowercase, removes stopwords)\nnltk.download('stopwords')\nstopwords_list = stopwords.words('english')\n\nno_bad_chars = re.compile('[!\\\"#$%&()*+-./:;<=>?@[\\]^_`{|}~\\n - ]')\n# no_nums = re.compile('[\\d-]')\n\ndef clean_text(text):\n#     text = no_nums.sub('', text)\n    text = no_bad_chars.sub(' ', text)\n    text = text.lower()\n    text = ' '.join(word for word in text.split() if word not in stopwords_list)\n    return text\n     ","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:15.802427Z","iopub.execute_input":"2024-07-28T12:29:15.802905Z","iopub.status.idle":"2024-07-28T12:29:35.849475Z","shell.execute_reply.started":"2024-07-28T12:29:15.802881Z","shell.execute_reply":"2024-07-28T12:29:35.848518Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"[nltk_data] Error loading stopwords: <urlopen error [Errno -3]\n[nltk_data]     Temporary failure in name resolution>\n","output_type":"stream"}]},{"cell_type":"code","source":"train_cleaned = train.copy()\ntrain['model_a'] = train['model_a'].astype(str)\ntrain['model_b'] = train['model_b'].astype(str)\ntrain['prompt'] = train['prompt'].astype(str)\ntrain['response_a'] = train['response_a'].astype(str)\ntrain['response_b'] = train['response_b'].astype(str)\n\n\n     ","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:35.850694Z","iopub.execute_input":"2024-07-28T12:29:35.850980Z","iopub.status.idle":"2024-07-28T12:29:35.873635Z","shell.execute_reply.started":"2024-07-28T12:29:35.850956Z","shell.execute_reply":"2024-07-28T12:29:35.872661Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"#Applying text cleaning function to text columns\n\ntrain_cleaned['model_a'] = (train['model_a']).apply(clean_text)\ntrain_cleaned['model_b'] = (train['model_b']).apply(clean_text)\ntrain_cleaned['prompt'] = (train['prompt']).apply(clean_text)\ntrain_cleaned['response_a'] = (train['response_a']).apply(clean_text)\ntrain_cleaned['response_b'] = (train['response_b']).apply(clean_text)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:29:35.874799Z","iopub.execute_input":"2024-07-28T12:29:35.875117Z","iopub.status.idle":"2024-07-28T12:30:45.681190Z","shell.execute_reply.started":"2024-07-28T12:29:35.875092Z","shell.execute_reply":"2024-07-28T12:30:45.680428Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"train_cleaned['winner_model_a'] = train['winner_model_a']\ntrain_cleaned['winner_model_b'] = train['winner_model_b']\ntrain_cleaned['winner_tie'] = train['winner_tie']","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:30:45.682473Z","iopub.execute_input":"2024-07-28T12:30:45.682761Z","iopub.status.idle":"2024-07-28T12:30:45.688656Z","shell.execute_reply.started":"2024-07-28T12:30:45.682736Z","shell.execute_reply":"2024-07-28T12:30:45.687748Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"print(train_cleaned.prompt.str.len().max())\nprint(train_cleaned.prompt.str.len().min())","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:30:45.689957Z","iopub.execute_input":"2024-07-28T12:30:45.690798Z","iopub.status.idle":"2024-07-28T12:30:45.772468Z","shell.execute_reply.started":"2024-07-28T12:30:45.690773Z","shell.execute_reply":"2024-07-28T12:30:45.771537Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"25012\n0\n","output_type":"stream"}]},{"cell_type":"code","source":"print(train_cleaned.response_a.str.len().max())","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:30:45.773673Z","iopub.execute_input":"2024-07-28T12:30:45.774083Z","iopub.status.idle":"2024-07-28T12:30:45.822393Z","shell.execute_reply.started":"2024-07-28T12:30:45.774047Z","shell.execute_reply":"2024-07-28T12:30:45.821374Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"35545\n","output_type":"stream"}]},{"cell_type":"code","source":"print(train_cleaned.response_b.str.len().max())","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:30:45.823554Z","iopub.execute_input":"2024-07-28T12:30:45.823872Z","iopub.status.idle":"2024-07-28T12:30:45.871087Z","shell.execute_reply.started":"2024-07-28T12:30:45.823846Z","shell.execute_reply":"2024-07-28T12:30:45.869921Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"42167\n","output_type":"stream"}]},{"cell_type":"code","source":"len(train_cleaned[train_cleaned.prompt.str.len()==0])","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:30:45.872461Z","iopub.execute_input":"2024-07-28T12:30:45.872792Z","iopub.status.idle":"2024-07-28T12:30:45.920825Z","shell.execute_reply.started":"2024-07-28T12:30:45.872766Z","shell.execute_reply":"2024-07-28T12:30:45.919586Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"137"},"metadata":{}}]},{"cell_type":"code","source":"len(train_cleaned[train_cleaned.response_a.str.len()==0])","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:30:45.922574Z","iopub.execute_input":"2024-07-28T12:30:45.922903Z","iopub.status.idle":"2024-07-28T12:30:45.971974Z","shell.execute_reply.started":"2024-07-28T12:30:45.922877Z","shell.execute_reply":"2024-07-28T12:30:45.970838Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"147"},"metadata":{}}]},{"cell_type":"code","source":"len(train_cleaned[train_cleaned.response_b.str.len()==0])","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:30:45.973544Z","iopub.execute_input":"2024-07-28T12:30:45.973900Z","iopub.status.idle":"2024-07-28T12:30:46.023155Z","shell.execute_reply.started":"2024-07-28T12:30:45.973869Z","shell.execute_reply":"2024-07-28T12:30:46.021678Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"131"},"metadata":{}}]},{"cell_type":"code","source":"train_cleaned2 = train_cleaned[(train_cleaned.prompt.astype(str).str.len()>0) & (train_cleaned.response_a.astype(str).str.len()>0)& (train_cleaned.response_b.astype(str).str.len()>0)]","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:30:46.024753Z","iopub.execute_input":"2024-07-28T12:30:46.025375Z","iopub.status.idle":"2024-07-28T12:30:46.169799Z","shell.execute_reply.started":"2024-07-28T12:30:46.025338Z","shell.execute_reply":"2024-07-28T12:30:46.168325Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"train_cleaned2.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:30:46.171744Z","iopub.execute_input":"2024-07-28T12:30:46.172233Z","iopub.status.idle":"2024-07-28T12:30:46.225108Z","shell.execute_reply.started":"2024-07-28T12:30:46.172202Z","shell.execute_reply":"2024-07-28T12:30:46.224140Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 57119 entries, 0 to 57476\nData columns (total 9 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   id              57119 non-null  int64 \n 1   model_a         57119 non-null  object\n 2   model_b         57119 non-null  object\n 3   prompt          57119 non-null  object\n 4   response_a      57119 non-null  object\n 5   response_b      57119 non-null  object\n 6   winner_model_a  57119 non-null  int64 \n 7   winner_model_b  57119 non-null  int64 \n 8   winner_tie      57119 non-null  int64 \ndtypes: int64(4), object(5)\nmemory usage: 4.4+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"# getting the total vocab length for the trainset\ntrain_cleaned2['combined_text'] = train_cleaned2['prompt'] + ' ' + train_cleaned2['response_a'] + ' ' + train_cleaned2['response_b']\ndata = train_cleaned2['combined_text'].map(word_tokenize).values\n","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:30:46.231140Z","iopub.execute_input":"2024-07-28T12:30:46.231424Z","iopub.status.idle":"2024-07-28T12:33:58.902796Z","shell.execute_reply.started":"2024-07-28T12:30:46.231400Z","shell.execute_reply":"2024-07-28T12:33:58.901979Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_34/657927988.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  train_cleaned2['combined_text'] = train_cleaned2['prompt'] + ' ' + train_cleaned2['response_a'] + ' ' + train_cleaned2['response_b']\n","output_type":"stream"}]},{"cell_type":"code","source":"# train_cleaned['combined_text'] = train_cleaned['prompt'] + ' ' + train_cleaned['response_a'] + ' ' + train_cleaned['response_b']\n# data = train_cleaned['combined_text'].map(word_tokenize).values\n","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:33:58.907045Z","iopub.execute_input":"2024-07-28T12:33:58.907321Z","iopub.status.idle":"2024-07-28T12:33:58.911412Z","shell.execute_reply.started":"2024-07-28T12:33:58.907299Z","shell.execute_reply":"2024-07-28T12:33:58.910440Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"total_vocabulary = set(word for combined_text in data for word in combined_text)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:33:58.912647Z","iopub.execute_input":"2024-07-28T12:33:58.912970Z","iopub.status.idle":"2024-07-28T12:34:01.246702Z","shell.execute_reply.started":"2024-07-28T12:33:58.912940Z","shell.execute_reply":"2024-07-28T12:34:01.245608Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"len(total_vocabulary)\nprint('There are {} unique words in the dataset.'.format(len(total_vocabulary)))","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:34:01.248091Z","iopub.execute_input":"2024-07-28T12:34:01.248446Z","iopub.status.idle":"2024-07-28T12:34:01.253875Z","shell.execute_reply.started":"2024-07-28T12:34:01.248414Z","shell.execute_reply":"2024-07-28T12:34:01.252997Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"There are 444900 unique words in the dataset.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Removing any unnecessary features:","metadata":{}},{"cell_type":"code","source":"# The features 'model_a' and 'model_b' are not in the test dataset, so I won't use these for modeling\n# I will also remove the 'combined_text' feature I created to get the total vocabulary, and the 'id' feature\ntrain_cleaned2.pop('combined_text')\n\ntrain_cleaned2.pop('model_a')\n\ntrain_cleaned2.pop('model_b')\n\ntrain_cleaned2.pop('id')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:34:01.255192Z","iopub.execute_input":"2024-07-28T12:34:01.255627Z","iopub.status.idle":"2024-07-28T12:34:01.276218Z","shell.execute_reply.started":"2024-07-28T12:34:01.255597Z","shell.execute_reply":"2024-07-28T12:34:01.275283Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"0             30192\n1             53567\n2             65089\n3             96401\n4            198779\n            ...    \n57472    4294656694\n57473    4294692063\n57474    4294710549\n57475    4294899228\n57476    4294947231\nName: id, Length: 57119, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"Train-test splitting the data:","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\ntrain_, test_ = train_test_split(train_cleaned2, random_state=22)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:34:01.277576Z","iopub.execute_input":"2024-07-28T12:34:01.277949Z","iopub.status.idle":"2024-07-28T12:34:01.305060Z","shell.execute_reply.started":"2024-07-28T12:34:01.277906Z","shell.execute_reply":"2024-07-28T12:34:01.304362Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":"Each of the input features need to be tokenized and vectorized, so that a model can interpret them:","metadata":{}},{"cell_type":"code","source":"# pip install keras-preprocessing","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:34:01.306243Z","iopub.execute_input":"2024-07-28T12:34:01.306643Z","iopub.status.idle":"2024-07-28T12:34:01.310918Z","shell.execute_reply.started":"2024-07-28T12:34:01.306594Z","shell.execute_reply":"2024-07-28T12:34:01.310026Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"tokenizer = tf.keras.preprocessing.text.Tokenizer(num_words=444901)\n\ntokenizer.fit_on_texts(list(train_))\ntokenized_tr = tokenizer.texts_to_sequences(train_)\n\ntokenizer.fit_on_texts(list(test_))\ntokenized_te = tokenizer.texts_to_sequences(test_)\n ","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:45:43.575571Z","iopub.execute_input":"2024-07-28T12:45:43.576284Z","iopub.status.idle":"2024-07-28T12:45:43.581551Z","shell.execute_reply.started":"2024-07-28T12:45:43.576255Z","shell.execute_reply":"2024-07-28T12:45:43.580592Z"},"trusted":true},"execution_count":57,"outputs":[]},{"cell_type":"code","source":"# # #tokenize train text features  \n# # # num_words parameter set to the total vocabulary length + 1\n\n# tokenizer = tf.keras.preprocessing.text.Tokenizer(num_words=444901)\n\n# tokenizer.fit_on_texts(list(train_['prompt']))\n# tokenized_prmpt_rsps_tr = tokenizer.texts_to_sequences(train_['prompt'])\n \n# tokenizer.fit_on_texts(list(train_['response_a']))\n# tokenized_rsps_a_tr = tokenizer.texts_to_sequences(train_['response_a'])\n\n# tokenizer.fit_on_texts(list(train_['response_b']))\n# tokenized_rsps_b_tr = tokenizer.texts_to_sequences(train_['response_b'])\n","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:34:01.312225Z","iopub.execute_input":"2024-07-28T12:34:01.312585Z","iopub.status.idle":"2024-07-28T12:34:24.594801Z","shell.execute_reply.started":"2024-07-28T12:34:01.312545Z","shell.execute_reply":"2024-07-28T12:34:24.594026Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"# # tokenize test text features\n\n# tokenizer.fit_on_texts(list(test_['prompt']))\n# tokenized_prmpt_rsps_te = tokenizer.texts_to_sequences(test_['prompt'])\n \n# tokenizer.fit_on_texts(list(test_['response_a']))\n# tokenized_rsps_a_te = tokenizer.texts_to_sequences(test_['response_a'])\n\n# tokenizer.fit_on_texts(list(test_['response_b']))\n# tokenized_rsps_b_te = tokenizer.texts_to_sequences(test_['response_b'])\n","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:45:49.805529Z","iopub.execute_input":"2024-07-28T12:45:49.805895Z","iopub.status.idle":"2024-07-28T12:45:49.810249Z","shell.execute_reply.started":"2024-07-28T12:45:49.805864Z","shell.execute_reply":"2024-07-28T12:45:49.809247Z"},"trusted":true},"execution_count":58,"outputs":[]},{"cell_type":"markdown","source":"Next, to make sure all the tokenized sequences are the same length, I'm going to pad them all to the length of the longest sequence. Any sequences shorter than that will be truncated to meet the size requirement.","metadata":{}},{"cell_type":"code","source":"train_.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:34:34.366795Z","iopub.execute_input":"2024-07-28T12:34:34.367449Z","iopub.status.idle":"2024-07-28T12:34:34.389583Z","shell.execute_reply.started":"2024-07-28T12:34:34.367415Z","shell.execute_reply":"2024-07-28T12:34:34.388680Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"       winner_model_a  winner_model_b    winner_tie\ncount    42839.000000    42839.000000  42839.000000\nmean         0.352156        0.340181      0.307664\nstd          0.477648        0.473775      0.461532\nmin          0.000000        0.000000      0.000000\n25%          0.000000        0.000000      0.000000\n50%          0.000000        0.000000      0.000000\n75%          1.000000        1.000000      1.000000\nmax          1.000000        1.000000      1.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>42839.000000</td>\n      <td>42839.000000</td>\n      <td>42839.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.352156</td>\n      <td>0.340181</td>\n      <td>0.307664</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.477648</td>\n      <td>0.473775</td>\n      <td>0.461532</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:34:34.391819Z","iopub.execute_input":"2024-07-28T12:34:34.392572Z","iopub.status.idle":"2024-07-28T12:34:34.411506Z","shell.execute_reply.started":"2024-07-28T12:34:34.392539Z","shell.execute_reply":"2024-07-28T12:34:34.410654Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"       winner_model_a  winner_model_b    winner_tie\ncount    14280.000000     14280.00000  14280.000000\nmean         0.341317         0.34944      0.309244\nstd          0.474168         0.47681      0.462198\nmin          0.000000         0.00000      0.000000\n25%          0.000000         0.00000      0.000000\n50%          0.000000         0.00000      0.000000\n75%          1.000000         1.00000      1.000000\nmax          1.000000         1.00000      1.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>14280.000000</td>\n      <td>14280.00000</td>\n      <td>14280.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.341317</td>\n      <td>0.34944</td>\n      <td>0.309244</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.474168</td>\n      <td>0.47681</td>\n      <td>0.462198</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.000000</td>\n      <td>0.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.000000</td>\n      <td>1.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000</td>\n      <td>1.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"max_len = 42167\nX_tr = sequence.pad_sequences(tokenized_tr, maxlen=max_len)\nX_te = sequence.pad_sequences(tokenized_te, maxlen=max_len)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:46:57.957117Z","iopub.execute_input":"2024-07-28T12:46:57.957472Z","iopub.status.idle":"2024-07-28T12:46:57.963056Z","shell.execute_reply.started":"2024-07-28T12:46:57.957445Z","shell.execute_reply":"2024-07-28T12:46:57.962158Z"},"trusted":true},"execution_count":59,"outputs":[]},{"cell_type":"code","source":"np.shape(X_tr)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:49:20.570725Z","iopub.execute_input":"2024-07-28T12:49:20.571670Z","iopub.status.idle":"2024-07-28T12:49:20.580864Z","shell.execute_reply.started":"2024-07-28T12:49:20.571630Z","shell.execute_reply":"2024-07-28T12:49:20.580033Z"},"trusted":true},"execution_count":66,"outputs":[{"execution_count":66,"output_type":"execute_result","data":{"text/plain":"(42167, 3)"},"metadata":{}}]},{"cell_type":"code","source":"X_tr = np.transpose(X_tr)\nX_te = np.transpose(X_te)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:58:43.626482Z","iopub.execute_input":"2024-07-28T12:58:43.627443Z","iopub.status.idle":"2024-07-28T12:58:43.631660Z","shell.execute_reply.started":"2024-07-28T12:58:43.627412Z","shell.execute_reply":"2024-07-28T12:58:43.630667Z"},"trusted":true},"execution_count":109,"outputs":[]},{"cell_type":"code","source":"X_te = np.transpose(X_te)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:57:06.148420Z","iopub.execute_input":"2024-07-28T12:57:06.148962Z","iopub.status.idle":"2024-07-28T12:57:06.156163Z","shell.execute_reply.started":"2024-07-28T12:57:06.148925Z","shell.execute_reply":"2024-07-28T12:57:06.153650Z"},"trusted":true},"execution_count":102,"outputs":[]},{"cell_type":"code","source":"X_te","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:54:01.203264Z","iopub.execute_input":"2024-07-28T12:54:01.203951Z","iopub.status.idle":"2024-07-28T12:54:01.211060Z","shell.execute_reply.started":"2024-07-28T12:54:01.203920Z","shell.execute_reply":"2024-07-28T12:54:01.209815Z"},"trusted":true},"execution_count":86,"outputs":[{"execution_count":86,"output_type":"execute_result","data":{"text/plain":"array([[0, 0, 0],\n       [0, 0, 0],\n       [0, 0, 0],\n       ...,\n       [0, 0, 0],\n       [0, 1, 1],\n       [2, 3, 4]], dtype=int32)"},"metadata":{}}]},{"cell_type":"code","source":"# # padding the sequences for the train data inputs\n# # X_train = sequence.pad_sequences(tokenized_tr, maxlen=4500)\n# max_len = 4000\n# X_t_1 = sequence.pad_sequences(tokenized_prmpt_rsps_tr, maxlen=max_len)\n# X_t_2 = sequence.pad_sequences(tokenized_rsps_a_tr, maxlen=max_len)\n# X_t_3 = sequence.pad_sequences(tokenized_rsps_b_tr, maxlen=max_len)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:34:34.412689Z","iopub.execute_input":"2024-07-28T12:34:34.413540Z","iopub.status.idle":"2024-07-28T12:34:36.299794Z","shell.execute_reply.started":"2024-07-28T12:34:34.413507Z","shell.execute_reply":"2024-07-28T12:34:36.298873Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"# # padding the sequences for the test data inputs\n# # X_test = sequence.pad_sequences(tokenized_te, maxlen=4500)\n# max_len = 4000\n# X_test_1 = sequence.pad_sequences(tokenized_prmpt_rsps_te, maxlen=max_len)\n# X_test_2 = sequence.pad_sequences(tokenized_rsps_a_te, maxlen=max_len)\n# X_test_3 = sequence.pad_sequences(tokenized_rsps_b_te, maxlen=max_len)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:34:36.301330Z","iopub.execute_input":"2024-07-28T12:34:36.301678Z","iopub.status.idle":"2024-07-28T12:34:36.935689Z","shell.execute_reply.started":"2024-07-28T12:34:36.301646Z","shell.execute_reply":"2024-07-28T12:34:36.934835Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"markdown","source":"We need to create a target that includes all three of the outcomes we are trying to predict (winner_model_a, winner_model_b, winner_tie):","metadata":{}},{"cell_type":"code","source":"def target(data):\n    y1 = data.pop('winner_model_a')\n    y1 = np.array(y1)\n    y2 = data.pop('winner_model_b')\n    y2 = np.array(y2)\n    y3 = data.pop('winner_tie')\n    y3 = np.array(y3)\n    return y1, y2, y3\n","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:34:36.936748Z","iopub.execute_input":"2024-07-28T12:34:36.937026Z","iopub.status.idle":"2024-07-28T12:34:36.942114Z","shell.execute_reply.started":"2024-07-28T12:34:36.936982Z","shell.execute_reply":"2024-07-28T12:34:36.941249Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"#format the outputs for both train and test sets\ntarget_train = target(train_)\ntarget_test = target(test_)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:34:36.943165Z","iopub.execute_input":"2024-07-28T12:34:36.943440Z","iopub.status.idle":"2024-07-28T12:34:36.953726Z","shell.execute_reply.started":"2024-07-28T12:34:36.943417Z","shell.execute_reply":"2024-07-28T12:34:36.952946Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"target_train= np.transpose(target_train)\ntarget_test= np.transpose(target_test)\ntarget_train","metadata":{"execution":{"iopub.status.busy":"2024-07-28T12:34:36.954869Z","iopub.execute_input":"2024-07-28T12:34:36.955435Z","iopub.status.idle":"2024-07-28T12:34:36.962715Z","shell.execute_reply.started":"2024-07-28T12:34:36.955411Z","shell.execute_reply":"2024-07-28T12:34:36.961800Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"array([[1, 0, 0],\n       [1, 0, 0],\n       [0, 0, 1],\n       ...,\n       [0, 0, 1],\n       [0, 1, 0],\n       [0, 1, 0]])"},"metadata":{}}]},{"cell_type":"markdown","source":"## Modeling","metadata":{}},{"cell_type":"code","source":"#Configure the model\nmodel3 = tf.keras.models.Sequential([\n#     tf.keras.layers.Flatten(), \n                                    tf.keras.layers.Dense(128, activation=tf.nn.relu), \n                                    tf.keras.layers.Dense(64, activation=tf.nn.relu), \n                                    tf.keras.layers.Dense(32, activation=tf.nn.relu), \n                                    tf.keras.layers.Dense(3, activation=tf.nn.softmax)])","metadata":{"execution":{"iopub.status.busy":"2024-07-28T13:00:48.023359Z","iopub.execute_input":"2024-07-28T13:00:48.024188Z","iopub.status.idle":"2024-07-28T13:00:48.035377Z","shell.execute_reply.started":"2024-07-28T13:00:48.024157Z","shell.execute_reply":"2024-07-28T13:00:48.034262Z"},"trusted":true},"execution_count":115,"outputs":[]},{"cell_type":"code","source":"keras.build(model3)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T13:00:49.381419Z","iopub.execute_input":"2024-07-28T13:00:49.382249Z","iopub.status.idle":"2024-07-28T13:00:49.419464Z","shell.execute_reply.started":"2024-07-28T13:00:49.382218Z","shell.execute_reply":"2024-07-28T13:00:49.418281Z"},"trusted":true},"execution_count":116,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","Cell \u001b[0;32mIn[116], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mkeras\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbuild\u001b[49m(model3)\n","\u001b[0;31mAttributeError\u001b[0m: module 'keras' has no attribute 'build'"],"ename":"AttributeError","evalue":"module 'keras' has no attribute 'build'","output_type":"error"}]},{"cell_type":"code","source":"keras.utils.plot_model(model3, show_shapes=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T13:00:50.425328Z","iopub.execute_input":"2024-07-28T13:00:50.426171Z","iopub.status.idle":"2024-07-28T13:00:50.479775Z","shell.execute_reply.started":"2024-07-28T13:00:50.426137Z","shell.execute_reply":"2024-07-28T13:00:50.478495Z"},"trusted":true},"execution_count":117,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[117], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mkeras\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mutils\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mplot_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmodel3\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mshow_shapes\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/utils/model_visualization.py:389\u001b[0m, in \u001b[0;36mplot_model\u001b[0;34m(model, to_file, show_shapes, show_dtype, show_layer_names, rankdir, expand_nested, dpi, show_layer_activations, show_trainable, **kwargs)\u001b[0m\n\u001b[1;32m    354\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Converts a Keras model to dot format and save to a file.\u001b[39;00m\n\u001b[1;32m    355\u001b[0m \n\u001b[1;32m    356\u001b[0m \u001b[38;5;124;03mExample:\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    385\u001b[0m \u001b[38;5;124;03m    This enables in-line display of the model plots in notebooks.\u001b[39;00m\n\u001b[1;32m    386\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    388\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m model\u001b[38;5;241m.\u001b[39mbuilt:\n\u001b[0;32m--> 389\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    390\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThis model has not yet been built. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    391\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBuild the model first by calling `build()` or by calling \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    392\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mthe model on a batch of data.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    393\u001b[0m     )\n\u001b[1;32m    394\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m check_pydot():\n\u001b[1;32m    395\u001b[0m     message \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    396\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mYou must install pydot (`pip install pydot`) \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    397\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfor `plot_model` to work.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    398\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: This model has not yet been built. Build the model first by calling `build()` or by calling the model on a batch of data."],"ename":"ValueError","evalue":"This model has not yet been built. Build the model first by calling `build()` or by calling the model on a batch of data.","output_type":"error"}]},{"cell_type":"code","source":"model3.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-07-28T13:00:52.906360Z","iopub.execute_input":"2024-07-28T13:00:52.907095Z","iopub.status.idle":"2024-07-28T13:00:52.916017Z","shell.execute_reply.started":"2024-07-28T13:00:52.907065Z","shell.execute_reply":"2024-07-28T13:00:52.915128Z"},"trusted":true},"execution_count":118,"outputs":[]},{"cell_type":"code","source":"model3.fit(X_tr,target_train,\n    epochs=1,\n    batch_size=64,\n    validation_split=0.2)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T13:00:53.507157Z","iopub.execute_input":"2024-07-28T13:00:53.507542Z","iopub.status.idle":"2024-07-28T13:00:58.402415Z","shell.execute_reply.started":"2024-07-28T13:00:53.507498Z","shell.execute_reply":"2024-07-28T13:00:58.401331Z"},"trusted":true},"execution_count":119,"outputs":[{"name":"stdout","text":"\u001b[1m528/528\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 5ms/step - accuracy: 0.3521 - loss: 1.0976 - val_accuracy: 0.3469 - val_loss: 1.0972\n","output_type":"stream"},{"execution_count":119,"output_type":"execute_result","data":{"text/plain":"<keras.src.callbacks.history.History at 0x78177e232cb0>"},"metadata":{}}]},{"cell_type":"code","source":"predictions = model3.predict(X_te)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-28T13:01:01.565276Z","iopub.execute_input":"2024-07-28T13:01:01.566173Z","iopub.status.idle":"2024-07-28T13:01:04.478943Z","shell.execute_reply.started":"2024-07-28T13:01:01.566140Z","shell.execute_reply":"2024-07-28T13:01:04.477892Z"},"trusted":true},"execution_count":120,"outputs":[{"name":"stdout","text":"\u001b[1m1318/1318\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 1ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"X_te","metadata":{"execution":{"iopub.status.busy":"2024-07-28T13:01:06.231806Z","iopub.execute_input":"2024-07-28T13:01:06.232714Z","iopub.status.idle":"2024-07-28T13:01:06.239020Z","shell.execute_reply.started":"2024-07-28T13:01:06.232680Z","shell.execute_reply":"2024-07-28T13:01:06.237821Z"},"trusted":true},"execution_count":121,"outputs":[{"execution_count":121,"output_type":"execute_result","data":{"text/plain":"array([[0, 0, 0],\n       [0, 0, 0],\n       [0, 0, 0],\n       ...,\n       [0, 0, 0],\n       [0, 1, 1],\n       [2, 3, 4]], dtype=int32)"},"metadata":{}}]},{"cell_type":"code","source":"np.shape(predictions)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T13:01:19.072087Z","iopub.execute_input":"2024-07-28T13:01:19.072999Z","iopub.status.idle":"2024-07-28T13:01:19.078731Z","shell.execute_reply.started":"2024-07-28T13:01:19.072950Z","shell.execute_reply":"2024-07-28T13:01:19.077783Z"},"trusted":true},"execution_count":124,"outputs":[{"execution_count":124,"output_type":"execute_result","data":{"text/plain":"(42167, 3)"},"metadata":{}}]},{"cell_type":"code","source":"predictions","metadata":{"execution":{"iopub.status.busy":"2024-07-28T13:01:22.763434Z","iopub.execute_input":"2024-07-28T13:01:22.763796Z","iopub.status.idle":"2024-07-28T13:01:22.770363Z","shell.execute_reply.started":"2024-07-28T13:01:22.763769Z","shell.execute_reply":"2024-07-28T13:01:22.769357Z"},"trusted":true},"execution_count":125,"outputs":[{"execution_count":125,"output_type":"execute_result","data":{"text/plain":"array([[0.3494601 , 0.33852306, 0.3120168 ],\n       [0.3494601 , 0.33852306, 0.3120168 ],\n       [0.3494601 , 0.33852306, 0.3120168 ],\n       ...,\n       [0.3494601 , 0.33852306, 0.3120168 ],\n       [0.3461327 , 0.3583527 , 0.29551458],\n       [0.31125242, 0.46632674, 0.22242084]], dtype=float32)"},"metadata":{}}]},{"cell_type":"code","source":"np.sum(predictions, axis=-1)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T13:01:26.840118Z","iopub.execute_input":"2024-07-28T13:01:26.840481Z","iopub.status.idle":"2024-07-28T13:01:26.848185Z","shell.execute_reply.started":"2024-07-28T13:01:26.840452Z","shell.execute_reply":"2024-07-28T13:01:26.847193Z"},"trusted":true},"execution_count":126,"outputs":[{"execution_count":126,"output_type":"execute_result","data":{"text/plain":"array([0.99999994, 0.99999994, 0.99999994, ..., 0.99999994, 1.        ,\n       1.        ], dtype=float32)"},"metadata":{}}]},{"cell_type":"code","source":"\ni1 = Input(shape=(None,), name=\"prompt\")\n\ni2 = Input(shape=(None,), name=\"response_a\")\n\ni3 = Input(shape=(None,), name=\"response_b\")\n\n\n# Embed each word in the text features into a 200-dimensional vector\nembedding_size = 150\n\nemb1 = layers.Embedding(input_dim = 3, output_dim = embedding_size,  mask_zero=True)\nemb_input1 = emb1(i1)\n\n# emb2 = layers.Embedding(input_dim = 4000, output_dim = embedding_size, mask_zero=True)\n# emb_input2 = emb2(i2)\n\n# emb3 = layers.Embedding(input_dim = 4000, output_dim = embedding_size,  mask_zero=True)\n# emb_input3 = emb3(i3)\n\n\n# # Reduce sequence of embedded words into a single 128-dimensional vector\nprompt_features = layers.LSTM(128, activation='relu')(emb_input1)\n# flatten1 = layers.Flatten()(prompt_features)\nresp_a_features = layers.LSTM(128, activation='relu')(emb_input2)\n# flatten2 = layers.Flatten()(resp_a_features)\nresp_b_features = layers.LSTM(128, activation='relu')(emb_input3)\n# flatten3 = layers.Flatten()(resp_b_features)\n\nx = layers.concatenate([prompt_features, resp_a_features, resp_b_features])\n\n\n# hidden = Dense(2048, activation='relu')(inputs)\n#     hidden = Dense(2048, activation='relu')(hidden)\n#     output = Dense(units = 2, activation='sigmoid')(hidden )\n    \nout1 = layers.Dense(1, name=\"model_a_winner\")(x)\nout2 = layers.Dense(1, name=\"model_b_winner\")(x)\nout3 = layers.Dense(1, name=\"model_tie\")(x)\n# soft = Dense(3, activation='softmax')\\\n\n# Instantiate an end-to-end model predicting both priority and department\nmodel = keras.Model(\n    inputs=[i1, i2, i3],\n    outputs=[out1, out2, out3],\n)\n# model.add(Dense(3, activation='softmax'))","metadata":{"execution":{"iopub.status.busy":"2024-07-28T01:57:04.771925Z","iopub.execute_input":"2024-07-28T01:57:04.772952Z","iopub.status.idle":"2024-07-28T01:57:06.895220Z","shell.execute_reply.started":"2024-07-28T01:57:04.772912Z","shell.execute_reply":"2024-07-28T01:57:06.894387Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"\ni1 = Input(shape=(None,), name=\"prompt\")\n\ni2 = Input(shape=(None,), name=\"response_a\")\n\ni3 = Input(shape=(None,), name=\"response_b\")\n\n\n# Embed each word in the text features into a 200-dimensional vector\nembedding_size = 150\n\nemb1 = layers.Embedding(input_dim = 4000, output_dim = embedding_size,  mask_zero=True)\nemb_input1 = emb1(i1)\n\nemb2 = layers.Embedding(input_dim = 4000, output_dim = embedding_size, mask_zero=True)\nemb_input2 = emb2(i2)\n\nemb3 = layers.Embedding(input_dim = 4000, output_dim = embedding_size,  mask_zero=True)\nemb_input3 = emb3(i3)\n\n\n# # Reduce sequence of embedded words into a single 128-dimensional vector\nprompt_features = layers.LSTM(128, activation='relu')(emb_input1)\n# flatten1 = layers.Flatten()(prompt_features)\nresp_a_features = layers.LSTM(128, activation='relu')(emb_input2)\n# flatten2 = layers.Flatten()(resp_a_features)\nresp_b_features = layers.LSTM(128, activation='relu')(emb_input3)\n# flatten3 = layers.Flatten()(resp_b_features)\n\nx = layers.concatenate([prompt_features, resp_a_features, resp_b_features])\n\n\n# hidden = Dense(2048, activation='relu')(inputs)\n#     hidden = Dense(2048, activation='relu')(hidden)\n#     output = Dense(units = 2, activation='sigmoid')(hidden )\n    \nout = Dense(3, activation='softmax')(x)\n# soft = Dense(3, activation='softmax')\\\n\n# Instantiate an end-to-end model predicting both priority and department\nmodel = keras.Model(\n    inputs=[i1, i2, i3],\n    outputs=out,\n)\n# model.add(Dense(3, activation='softmax'))","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:24:27.932467Z","iopub.execute_input":"2024-07-28T02:24:27.933399Z","iopub.status.idle":"2024-07-28T02:24:28.079560Z","shell.execute_reply.started":"2024-07-28T02:24:27.933355Z","shell.execute_reply":"2024-07-28T02:24:28.078503Z"},"trusted":true},"execution_count":79,"outputs":[]},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:24:29.724462Z","iopub.execute_input":"2024-07-28T02:24:29.724864Z","iopub.status.idle":"2024-07-28T02:24:29.760068Z","shell.execute_reply.started":"2024-07-28T02:24:29.724833Z","shell.execute_reply":"2024-07-28T02:24:29.759147Z"},"trusted":true},"execution_count":80,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_3\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_3\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ prompt (\u001b[38;5;33mInputLayer\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ -                 │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ response_a          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ response_b          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_9         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m150\u001b[0m) │    \u001b[38;5;34m600,000\u001b[0m │ prompt[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]      │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ not_equal_9         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ prompt[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]      │\n│ (\u001b[38;5;33mNotEqual\u001b[0m)          │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_10        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m150\u001b[0m) │    \u001b[38;5;34m600,000\u001b[0m │ response_a[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ not_equal_10        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ response_a[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mNotEqual\u001b[0m)          │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_11        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m150\u001b[0m) │    \u001b[38;5;34m600,000\u001b[0m │ response_b[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mEmbedding\u001b[0m)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ not_equal_11        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ response_b[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]  │\n│ (\u001b[38;5;33mNotEqual\u001b[0m)          │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ lstm_9 (\u001b[38;5;33mLSTM\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │    \u001b[38;5;34m142,848\u001b[0m │ embedding_9[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m… │\n│                     │                   │            │ not_equal_9[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ lstm_10 (\u001b[38;5;33mLSTM\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │    \u001b[38;5;34m142,848\u001b[0m │ embedding_10[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m…\u001b[0m │\n│                     │                   │            │ not_equal_10[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m…\u001b[0m │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ lstm_11 (\u001b[38;5;33mLSTM\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │    \u001b[38;5;34m142,848\u001b[0m │ embedding_11[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m…\u001b[0m │\n│                     │                   │            │ not_equal_11[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m…\u001b[0m │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ concatenate_3       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m384\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ lstm_9[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],     │\n│ (\u001b[38;5;33mConcatenate\u001b[0m)       │                   │            │ lstm_10[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],    │\n│                     │                   │            │ lstm_11[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3\u001b[0m)         │      \u001b[38;5;34m1,155\u001b[0m │ concatenate_3[\u001b[38;5;34m0\u001b[0m]… │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ prompt (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ response_a          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ response_b          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_9         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">150</span>) │    <span style=\"color: #00af00; text-decoration-color: #00af00\">600,000</span> │ prompt[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]      │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ not_equal_9         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ prompt[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]      │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">NotEqual</span>)          │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_10        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">150</span>) │    <span style=\"color: #00af00; text-decoration-color: #00af00\">600,000</span> │ response_a[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ not_equal_10        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ response_a[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">NotEqual</span>)          │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_11        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">150</span>) │    <span style=\"color: #00af00; text-decoration-color: #00af00\">600,000</span> │ response_b[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ not_equal_11        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ response_b[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]  │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">NotEqual</span>)          │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ lstm_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │    <span style=\"color: #00af00; text-decoration-color: #00af00\">142,848</span> │ embedding_9[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n│                     │                   │            │ not_equal_9[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ lstm_10 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │    <span style=\"color: #00af00; text-decoration-color: #00af00\">142,848</span> │ embedding_10[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n│                     │                   │            │ not_equal_10[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ lstm_11 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │    <span style=\"color: #00af00; text-decoration-color: #00af00\">142,848</span> │ embedding_11[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n│                     │                   │            │ not_equal_11[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ concatenate_3       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">384</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ lstm_9[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],     │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Concatenate</span>)       │                   │            │ lstm_10[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],    │\n│                     │                   │            │ lstm_11[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)         │      <span style=\"color: #00af00; text-decoration-color: #00af00\">1,155</span> │ concatenate_3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,229,699\u001b[0m (8.51 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,229,699</span> (8.51 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2,229,699\u001b[0m (8.51 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,229,699</span> (8.51 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"keras.utils.plot_model(model, show_shapes=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:24:30.826739Z","iopub.execute_input":"2024-07-28T02:24:30.827118Z","iopub.status.idle":"2024-07-28T02:24:31.440143Z","shell.execute_reply.started":"2024-07-28T02:24:30.827090Z","shell.execute_reply":"2024-07-28T02:24:31.439129Z"},"trusted":true},"execution_count":81,"outputs":[{"execution_count":81,"output_type":"execute_result","data":{"image/png":"","text/plain":"<IPython.core.display.Image object>"},"metadata":{}}]},{"cell_type":"code","source":"\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.BinaryCrossentropy(),  \n              metrics=['accuracy', 'accuracy', 'accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:24:36.104280Z","iopub.execute_input":"2024-07-28T02:24:36.105171Z","iopub.status.idle":"2024-07-28T02:24:36.115067Z","shell.execute_reply.started":"2024-07-28T02:24:36.105135Z","shell.execute_reply":"2024-07-28T02:24:36.114197Z"},"trusted":true},"execution_count":82,"outputs":[]},{"cell_type":"code","source":"\n# model.compile(optimizer='adam', \n#               loss = 'binary_crossentropy')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# model_1.compile(optimizer='adam', \n#               loss = ['binary_crossentropy',\n# #               metrics = 'accuracy'\n#              )","metadata":{"execution":{"iopub.status.busy":"2024-07-28T01:26:17.822965Z","iopub.execute_input":"2024-07-28T01:26:17.823844Z","iopub.status.idle":"2024-07-28T01:26:17.828088Z","shell.execute_reply.started":"2024-07-28T01:26:17.823809Z","shell.execute_reply":"2024-07-28T01:26:17.827015Z"},"trusted":true},"execution_count":77,"outputs":[]},{"cell_type":"code","source":"y_train = np.asarray(target_train).astype('float32').reshape((-1,1))\n","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:26:18.055916Z","iopub.execute_input":"2024-07-28T02:26:18.056790Z","iopub.status.idle":"2024-07-28T02:26:18.062597Z","shell.execute_reply.started":"2024-07-28T02:26:18.056757Z","shell.execute_reply":"2024-07-28T02:26:18.061595Z"},"trusted":true},"execution_count":83,"outputs":[]},{"cell_type":"code","source":"y_test = np.asarray(target_test).astype('float32').reshape((-1,1))","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:26:25.141864Z","iopub.execute_input":"2024-07-28T02:26:25.142569Z","iopub.status.idle":"2024-07-28T02:26:25.147599Z","shell.execute_reply.started":"2024-07-28T02:26:25.142535Z","shell.execute_reply":"2024-07-28T02:26:25.146529Z"},"trusted":true},"execution_count":84,"outputs":[]},{"cell_type":"code","source":"np.shape(target_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:26:25.465948Z","iopub.execute_input":"2024-07-28T02:26:25.466834Z","iopub.status.idle":"2024-07-28T02:26:25.472908Z","shell.execute_reply.started":"2024-07-28T02:26:25.466797Z","shell.execute_reply":"2024-07-28T02:26:25.471923Z"},"trusted":true},"execution_count":85,"outputs":[{"execution_count":85,"output_type":"execute_result","data":{"text/plain":"(14280, 3)"},"metadata":{}}]},{"cell_type":"code","source":"model.fit(\n    [X_t_1, X_t_2, X_t_3], target_train,\n    epochs=1,\n    batch_size=64,\n    validation_split=0.2\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:26:40.156379Z","iopub.execute_input":"2024-07-28T02:26:40.156793Z","iopub.status.idle":"2024-07-28T02:26:44.675169Z","shell.execute_reply.started":"2024-07-28T02:26:40.156760Z","shell.execute_reply":"2024-07-28T02:26:44.673796Z"},"trusted":true},"execution_count":87,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[87], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m      2\u001b[0m \u001b[43m    \u001b[49m\u001b[43m[\u001b[49m\u001b[43mX_t_1\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX_t_2\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX_t_3\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtarget_train\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[43m    \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m      4\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m64\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m      5\u001b[0m \u001b[43m    \u001b[49m\u001b[43mvalidation_split\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m0.2\u001b[39;49m\n\u001b[1;32m      6\u001b[0m \u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py:122\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    119\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m    120\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[1;32m    121\u001b[0m     \u001b[38;5;66;03m# `keras.config.disable_traceback_filtering()`\u001b[39;00m\n\u001b[0;32m--> 122\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    123\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    124\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/backend/tensorflow/trainer.py:122\u001b[0m, in \u001b[0;36mTensorFlowTrainer.make_train_function.<locals>.one_step_on_iterator\u001b[0;34m(iterator)\u001b[0m\n\u001b[1;32m    120\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Runs a single training step given a Dataset iterator.\"\"\"\u001b[39;00m\n\u001b[1;32m    121\u001b[0m data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mnext\u001b[39m(iterator)\n\u001b[0;32m--> 122\u001b[0m outputs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdistribute_strategy\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    123\u001b[0m \u001b[43m    \u001b[49m\u001b[43mone_step_on_data\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43margs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    124\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    125\u001b[0m outputs \u001b[38;5;241m=\u001b[39m reduce_per_replica(\n\u001b[1;32m    126\u001b[0m     outputs,\n\u001b[1;32m    127\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdistribute_strategy,\n\u001b[1;32m    128\u001b[0m     reduction\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdistribute_reduction_method,\n\u001b[1;32m    129\u001b[0m )\n\u001b[1;32m    130\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m outputs\n","\u001b[0;31mValueError\u001b[0m: Creating variables on a non-first call to a function decorated with tf.function."],"ename":"ValueError","evalue":"Creating variables on a non-first call to a function decorated with tf.function.","output_type":"error"}]},{"cell_type":"code","source":"# # Unfreeze the base_model. Note that it keeps running in inference mode\n# # since we passed `training=False` when calling it. This means that\n# # the batchnorm layers will not update their batch statistics.\n# # This prevents the batchnorm layers from undoing all the training\n# # we've done so far.\n# base_model.trainable = True\n# model.summary()\n\n# model.compile(\n#     optimizer=keras.optimizers.Adam(1e-5),  # Low learning rate\n#     loss=keras.losses.BinaryCrossentropy(from_logits=True),\n#     metrics=[keras.metrics.BinaryAccuracy()],\n# )\n\n# epochs = 10\n# model.fit(train_ds, epochs=epochs, validation_data=validation_ds)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# model_1.fit(\n#     [X_t_1, X_t_2, X_t_3],\n#     y_train,\n#     epochs=1,\n#     batch_size=64,\n#     validation_split=0.2\n# )","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.evaluate([X_test_1, X_test_2, X_test_3], y_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:15:01.941254Z","iopub.execute_input":"2024-07-28T02:15:01.941968Z","iopub.status.idle":"2024-07-28T02:15:02.026452Z","shell.execute_reply.started":"2024-07-28T02:15:01.941930Z","shell.execute_reply":"2024-07-28T02:15:02.025148Z"},"trusted":true},"execution_count":56,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[56], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mevaluate\u001b[49m\u001b[43m(\u001b[49m\u001b[43m[\u001b[49m\u001b[43mX_test_1\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX_test_2\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX_test_3\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_test\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py:122\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    119\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m    120\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[1;32m    121\u001b[0m     \u001b[38;5;66;03m# `keras.config.disable_traceback_filtering()`\u001b[39;00m\n\u001b[0;32m--> 122\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    123\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    124\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/trainers/data_adapters/data_adapter_utils.py:114\u001b[0m, in \u001b[0;36mcheck_data_cardinality\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    110\u001b[0m     sizes \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mjoin(\n\u001b[1;32m    111\u001b[0m         \u001b[38;5;28mstr\u001b[39m(i\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m]) \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m tree\u001b[38;5;241m.\u001b[39mflatten(single_data)\n\u001b[1;32m    112\u001b[0m     )\n\u001b[1;32m    113\u001b[0m     msg \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlabel\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m sizes: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00msizes\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m--> 114\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg)\n","\u001b[0;31mValueError\u001b[0m: Data cardinality is ambiguous. Make sure all arrays contain the same number of samples.'x' sizes: 14280, 14280, 14280\n'y' sizes: 42840\n"],"ename":"ValueError","evalue":"Data cardinality is ambiguous. Make sure all arrays contain the same number of samples.'x' sizes: 14280, 14280, 14280\n'y' sizes: 42840\n","output_type":"error"}]},{"cell_type":"code","source":"np.shape(X_test_1)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"np.shape(X_t_1)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"np.shape(y_train)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:15:56.651673Z","iopub.execute_input":"2024-07-28T02:15:56.652579Z","iopub.status.idle":"2024-07-28T02:15:56.658343Z","shell.execute_reply.started":"2024-07-28T02:15:56.652543Z","shell.execute_reply":"2024-07-28T02:15:56.657592Z"},"trusted":true},"execution_count":58,"outputs":[{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"(128517, 1)"},"metadata":{}}]},{"cell_type":"code","source":"np.transpose(y_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:15:57.580308Z","iopub.execute_input":"2024-07-28T02:15:57.581320Z","iopub.status.idle":"2024-07-28T02:15:57.588388Z","shell.execute_reply.started":"2024-07-28T02:15:57.581282Z","shell.execute_reply":"2024-07-28T02:15:57.587297Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"array([[0., 1., 0., ..., 1., 0., 0.]], dtype=float32)"},"metadata":{}}]},{"cell_type":"code","source":"np.shape(target_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:16:03.025617Z","iopub.execute_input":"2024-07-28T02:16:03.026017Z","iopub.status.idle":"2024-07-28T02:16:03.032366Z","shell.execute_reply.started":"2024-07-28T02:16:03.025987Z","shell.execute_reply":"2024-07-28T02:16:03.031403Z"},"trusted":true},"execution_count":60,"outputs":[{"execution_count":60,"output_type":"execute_result","data":{"text/plain":"(14280, 3)"},"metadata":{}}]},{"cell_type":"code","source":"# Generate predictions\npredictions = model.predict([X_test_1, X_test_2, X_test_3])","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:19:26.026400Z","iopub.execute_input":"2024-07-28T02:19:26.026834Z","iopub.status.idle":"2024-07-28T02:21:36.850000Z","shell.execute_reply.started":"2024-07-28T02:19:26.026801Z","shell.execute_reply":"2024-07-28T02:21:36.848767Z"},"trusted":true},"execution_count":72,"outputs":[{"name":"stdout","text":"\u001b[1m447/447\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m129s\u001b[0m 287ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"predictions = np.transpose(predictions)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:21:36.852531Z","iopub.execute_input":"2024-07-28T02:21:36.853277Z","iopub.status.idle":"2024-07-28T02:21:36.857934Z","shell.execute_reply.started":"2024-07-28T02:21:36.853235Z","shell.execute_reply":"2024-07-28T02:21:36.856963Z"},"trusted":true},"execution_count":73,"outputs":[]},{"cell_type":"code","source":"# np.shape(predictions)","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:21:36.859164Z","iopub.execute_input":"2024-07-28T02:21:36.859480Z","iopub.status.idle":"2024-07-28T02:21:36.871150Z","shell.execute_reply.started":"2024-07-28T02:21:36.859446Z","shell.execute_reply":"2024-07-28T02:21:36.870299Z"},"trusted":true},"execution_count":74,"outputs":[]},{"cell_type":"code","source":"predictions","metadata":{"execution":{"iopub.status.busy":"2024-07-28T02:21:36.872966Z","iopub.execute_input":"2024-07-28T02:21:36.873286Z","iopub.status.idle":"2024-07-28T02:21:36.884214Z","shell.execute_reply.started":"2024-07-28T02:21:36.873256Z","shell.execute_reply":"2024-07-28T02:21:36.883092Z"},"trusted":true},"execution_count":75,"outputs":[{"execution_count":75,"output_type":"execute_result","data":{"text/plain":"array([[[ 0.32160628, -0.00869719,  0.00237568],\n        [ 0.3574357 ,  0.02946211, -0.026855  ],\n        [ 0.35536024,  0.02213438, -0.0284159 ],\n        ...,\n        [ 0.28033787, -0.00377137, -0.02176068],\n        [ 0.37950146,  0.03489124, -0.01685137],\n        [ 0.28080526,  0.00129985,  0.00497314]]], dtype=float32)"},"metadata":{}}]},{"cell_type":"code","source":"# # Save model\n# model.save('./model_multi_in_out1/', save_format='tf')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Restore model\nloaded_model = tf.keras.models.load_model('./model_multi_in_out1/')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Run predict with restored model\npredictions = loaded_model.predict([X_test_1, X_test_2, X_test_3])\nwinner_model_a = predictions[0]\nwinner_model_b = predictions[1]\nwinner_tie = predictions[2]\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Conclusion","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}