{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":66631,"databundleVersionId":8346466,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Kaggle Competition Notebook:\"LMSYS - Chatbot Arena Human Preference Predictions\"","metadata":{}},{"cell_type":"markdown","source":"In this notebook, I am conducting data exploration, analysis, and modeling in order to generate predictions for which Chatbot model will be preferred for a given prompt.","metadata":{}},{"cell_type":"markdown","source":"## Data Preparation","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-15T17:47:44.715179Z","iopub.execute_input":"2024-05-15T17:47:44.715882Z","iopub.status.idle":"2024-05-15T17:47:46.296795Z","shell.execute_reply.started":"2024-05-15T17:47:44.715827Z","shell.execute_reply":"2024-05-15T17:47:46.295034Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/lmsys-chatbot-arena/sample_submission.csv\n/kaggle/input/lmsys-chatbot-arena/train.csv\n/kaggle/input/lmsys-chatbot-arena/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport math\nimport seaborn as sns\nsns.set(font_scale=2)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.metrics import precision_score, accuracy_score, f1_score, confusion_matrix, classification_report, roc_curve, auc, ConfusionMatrixDisplay\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\nfrom sklearn.neighbors import KNeighborsClassifier\nimport nltk\nnltk.download('punkt')\nfrom nltk.corpus import stopwords\nimport re\nfrom nltk.tokenize import RegexpTokenizer, word_tokenize\nfrom sklearn.metrics import log_loss\nfrom sklearn.pipeline import Pipeline\nfrom sklearn import feature_extraction, linear_model, model_selection, preprocessing\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer, TfidfTransformer\nfrom nltk import FreqDist\nfrom sklearn.naive_bayes import MultinomialNB\nfrom nltk.stem.snowball import SnowballStemmer\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.multioutput import MultiOutputClassifier","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:47:46.299460Z","iopub.execute_input":"2024-05-15T17:47:46.300182Z","iopub.status.idle":"2024-05-15T17:47:50.258757Z","shell.execute_reply.started":"2024-05-15T17:47:46.300136Z","shell.execute_reply":"2024-05-15T17:47:50.257305Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package punkt to /usr/share/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n","output_type":"stream"}]},{"cell_type":"code","source":"# !pip install keras==2.15.0","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:47:50.260618Z","iopub.execute_input":"2024-05-15T17:47:50.261073Z","iopub.status.idle":"2024-05-15T17:48:09.386645Z","shell.execute_reply.started":"2024-05-15T17:47:50.261036Z","shell.execute_reply":"2024-05-15T17:48:09.385091Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Requirement already satisfied: keras==2.15.0 in /opt/conda/lib/python3.10/site-packages (2.15.0)\n","output_type":"stream"}]},{"cell_type":"code","source":"# from tensorflow import keras\nimport keras\nimport keras_nlp\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Input\n\nfrom tqdm.auto import tqdm\n\nfrom tensorflow.keras.layers import TextVectorization\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense, Embedding, GlobalAveragePooling1D\n","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:48:09.403749Z","iopub.execute_input":"2024-05-15T17:48:09.404172Z","iopub.status.idle":"2024-05-15T17:48:22.661509Z","shell.execute_reply.started":"2024-05-15T17:48:09.404137Z","shell.execute_reply":"2024-05-15T17:48:22.660002Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stderr","text":"2024-05-15 17:48:12.157890: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-05-15 17:48:12.158140: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-05-15 17:48:12.359496: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"name":"stdout","text":"Using TensorFlow backend\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Loading the train and test datasets:","metadata":{}},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/lmsys-chatbot-arena/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/lmsys-chatbot-arena/test.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:48:22.663587Z","iopub.execute_input":"2024-05-15T17:48:22.664708Z","iopub.status.idle":"2024-05-15T17:48:27.474217Z","shell.execute_reply.started":"2024-05-15T17:48:22.664644Z","shell.execute_reply":"2024-05-15T17:48:27.472844Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:48:27.476486Z","iopub.execute_input":"2024-05-15T17:48:27.476999Z","iopub.status.idle":"2024-05-15T17:48:27.508734Z","shell.execute_reply.started":"2024-05-15T17:48:27.476952Z","shell.execute_reply":"2024-05-15T17:48:27.507708Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"       id             model_a              model_b  \\\n0   30192  gpt-4-1106-preview           gpt-4-0613   \n1   53567           koala-13b           gpt-4-0613   \n2   65089  gpt-3.5-turbo-0613       mistral-medium   \n3   96401    llama-2-13b-chat  mistral-7b-instruct   \n4  198779           koala-13b   gpt-3.5-turbo-0314   \n\n                                              prompt  \\\n0  [\"Is it morally right to try to have a certain...   \n1  [\"What is the difference between marriage lice...   \n2  [\"explain function calling. how would you call...   \n3  [\"How can I create a test set for a very rare ...   \n4  [\"What is the best way to travel from Tel-Aviv...   \n\n                                          response_a  \\\n0  [\"The question of whether it is morally right ...   \n1  [\"A marriage license is a legal document that ...   \n2  [\"Function calling is the process of invoking ...   \n3  [\"Creating a test set for a very rare category...   \n4  [\"The best way to travel from Tel Aviv to Jeru...   \n\n                                          response_b  winner_model_a  \\\n0  [\"As an AI, I don't have personal beliefs or o...               1   \n1  [\"A marriage license and a marriage certificat...               0   \n2  [\"Function calling is the process of invoking ...               0   \n3  [\"When building a classifier for a very rare c...               1   \n4  [\"The best way to travel from Tel-Aviv to Jeru...               0   \n\n   winner_model_b  winner_tie  \n0               0           0  \n1               1           0  \n2               0           1  \n3               0           0  \n4               1           0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>model_a</th>\n      <th>model_b</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>gpt-4-1106-preview</td>\n      <td>gpt-4-0613</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>koala-13b</td>\n      <td>gpt-4-0613</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>gpt-3.5-turbo-0613</td>\n      <td>mistral-medium</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>llama-2-13b-chat</td>\n      <td>mistral-7b-instruct</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>koala-13b</td>\n      <td>gpt-3.5-turbo-0314</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:48:27.511096Z","iopub.execute_input":"2024-05-15T17:48:27.511491Z","iopub.status.idle":"2024-05-15T17:48:27.525274Z","shell.execute_reply.started":"2024-05-15T17:48:27.511458Z","shell.execute_reply":"2024-05-15T17:48:27.523976Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"        id                                             prompt  \\\n0   136060  [\"I have three oranges today, I ate an orange ...   \n1   211333  [\"You are a mediator in a heated political deb...   \n2  1233961  [\"How to initialize the classification head wh...   \n\n                                          response_a  \\\n0                    [\"You have two oranges today.\"]   \n1  [\"Thank you for sharing the details of the sit...   \n2  [\"When you want to initialize the classificati...   \n\n                                          response_b  \n0  [\"You still have three oranges. Eating an oran...  \n1  [\"Mr Reddy and Ms Blue both have valid points ...  \n2  [\"To initialize the classification head when p...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>136060</td>\n      <td>[\"I have three oranges today, I ate an orange ...</td>\n      <td>[\"You have two oranges today.\"]</td>\n      <td>[\"You still have three oranges. Eating an oran...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>211333</td>\n      <td>[\"You are a mediator in a heated political deb...</td>\n      <td>[\"Thank you for sharing the details of the sit...</td>\n      <td>[\"Mr Reddy and Ms Blue both have valid points ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1233961</td>\n      <td>[\"How to initialize the classification head wh...</td>\n      <td>[\"When you want to initialize the classificati...</td>\n      <td>[\"To initialize the classification head when p...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:48:27.527530Z","iopub.execute_input":"2024-05-15T17:48:27.528062Z","iopub.status.idle":"2024-05-15T17:48:27.608107Z","shell.execute_reply.started":"2024-05-15T17:48:27.528014Z","shell.execute_reply":"2024-05-15T17:48:27.606226Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 57477 entries, 0 to 57476\nData columns (total 9 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   id              57477 non-null  int64 \n 1   model_a         57477 non-null  object\n 2   model_b         57477 non-null  object\n 3   prompt          57477 non-null  object\n 4   response_a      57477 non-null  object\n 5   response_b      57477 non-null  object\n 6   winner_model_a  57477 non-null  int64 \n 7   winner_model_b  57477 non-null  int64 \n 8   winner_tie      57477 non-null  int64 \ndtypes: int64(4), object(5)\nmemory usage: 3.9+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"train.describe()","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:48:27.613086Z","iopub.execute_input":"2024-05-15T17:48:27.613538Z","iopub.status.idle":"2024-05-15T17:48:27.650687Z","shell.execute_reply.started":"2024-05-15T17:48:27.613501Z","shell.execute_reply":"2024-05-15T17:48:27.649357Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"                 id  winner_model_a  winner_model_b    winner_tie\ncount  5.747700e+04    57477.000000    57477.000000  57477.000000\nmean   2.142564e+09        0.349079        0.341911      0.309011\nstd    1.238327e+09        0.476683        0.474354      0.462090\nmin    3.019200e+04        0.000000        0.000000      0.000000\n25%    1.071821e+09        0.000000        0.000000      0.000000\n50%    2.133658e+09        0.000000        0.000000      0.000000\n75%    3.211645e+09        1.000000        1.000000      1.000000\nmax    4.294947e+09        1.000000        1.000000      1.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5.747700e+04</td>\n      <td>57477.000000</td>\n      <td>57477.000000</td>\n      <td>57477.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2.142564e+09</td>\n      <td>0.349079</td>\n      <td>0.341911</td>\n      <td>0.309011</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.238327e+09</td>\n      <td>0.476683</td>\n      <td>0.474354</td>\n      <td>0.462090</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>3.019200e+04</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.071821e+09</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2.133658e+09</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>3.211645e+09</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>4.294947e+09</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train['model_a'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:48:27.652728Z","iopub.execute_input":"2024-05-15T17:48:27.653140Z","iopub.status.idle":"2024-05-15T17:48:27.672982Z","shell.execute_reply.started":"2024-05-15T17:48:27.653105Z","shell.execute_reply":"2024-05-15T17:48:27.671484Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"model_a\ngpt-4-1106-preview          3678\ngpt-3.5-turbo-0613          3553\ngpt-4-0613                  3099\nclaude-2.1                  2859\ngpt-4-0314                  2087\n                            ... \nfalcon-180b-chat             145\nopenchat-3.5-0106            108\nqwen1.5-7b-chat              106\nqwen1.5-4b-chat              100\nmistral-7b-instruct-v0.2      54\nName: count, Length: 64, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train['model_b'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:48:27.675492Z","iopub.execute_input":"2024-05-15T17:48:27.676166Z","iopub.status.idle":"2024-05-15T17:48:27.697619Z","shell.execute_reply.started":"2024-05-15T17:48:27.676118Z","shell.execute_reply":"2024-05-15T17:48:27.695870Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"model_b\ngpt-4-1106-preview          3709\ngpt-3.5-turbo-0613          3530\ngpt-4-0613                  3066\nclaude-2.1                  2724\nclaude-instant-1            2051\n                            ... \nfalcon-180b-chat             141\nopenchat-3.5-0106            136\nqwen1.5-7b-chat              102\nqwen1.5-4b-chat              100\nmistral-7b-instruct-v0.2      46\nName: count, Length: 64, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"The top 4 models that won most often as model a or as model b are:\n- gpt-4-1106-preview\n- gpt-4-0613\n- gpt-3.5-turbo-0613\n- gpt-4-0314","metadata":{}},{"cell_type":"code","source":"# Creating a function to perform cleaning steps at once (Removes numbers and unnecessary characters, makes all letters lowercase, removes stopwords)\nnltk.download('stopwords')\nstopwords_list = stopwords.words('english')\n\nno_bad_chars = re.compile('[!\\\"#$%&()*+-./:;<=>?@[\\]^_`{|}~\\n - ]')\n# no_nums = re.compile('[\\d-]')\n\ndef clean_text(text):\n#     text = no_nums.sub('', text)\n    text = no_bad_chars.sub(' ', text)\n    text = text.lower()\n    text = ' '.join(word for word in text.split() if word not in stopwords_list)\n    return text\n     ","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:48:27.699411Z","iopub.execute_input":"2024-05-15T17:48:27.699809Z","iopub.status.idle":"2024-05-15T17:48:27.719090Z","shell.execute_reply.started":"2024-05-15T17:48:27.699777Z","shell.execute_reply":"2024-05-15T17:48:27.717482Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n","output_type":"stream"}]},{"cell_type":"code","source":"train_cleaned = train.copy()\ntrain['model_a'] = train['model_a'].astype(str)\ntrain['model_b'] = train['model_b'].astype(str)\ntrain['prompt'] = train['prompt'].astype(str)\ntrain['response_a'] = train['response_a'].astype(str)\ntrain['response_b'] = train['response_b'].astype(str)\n\n\n     ","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:48:27.720815Z","iopub.execute_input":"2024-05-15T17:48:27.721239Z","iopub.status.idle":"2024-05-15T17:48:27.752930Z","shell.execute_reply.started":"2024-05-15T17:48:27.721205Z","shell.execute_reply":"2024-05-15T17:48:27.751566Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"#Applying text cleaning function to text columns\n\ntrain_cleaned['model_a'] = (train['model_a']).apply(clean_text)\ntrain_cleaned['model_b'] = (train['model_b']).apply(clean_text)\ntrain_cleaned['prompt'] = (train['prompt']).apply(clean_text)\ntrain_cleaned['response_a'] = (train['response_a']).apply(clean_text)\ntrain_cleaned['response_b'] = (train['response_b']).apply(clean_text)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:48:27.754601Z","iopub.execute_input":"2024-05-15T17:48:27.754973Z","iopub.status.idle":"2024-05-15T17:49:46.564198Z","shell.execute_reply.started":"2024-05-15T17:48:27.754943Z","shell.execute_reply":"2024-05-15T17:49:46.562704Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"# from sklearn.feature_extraction.text import CountVectorizer\n\n# vectorizer = CountVectorizer()\n# X = vectorizer.fit_transform(train_cleaned[train_cleaned['prompt']])","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:49:46.566441Z","iopub.execute_input":"2024-05-15T17:49:46.566839Z","iopub.status.idle":"2024-05-15T17:49:46.575179Z","shell.execute_reply.started":"2024-05-15T17:49:46.566807Z","shell.execute_reply":"2024-05-15T17:49:46.573924Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"# from nltk.tokenize import  word_tokenize\n# # tokenization of sentence into words\n# # modela_tokens = word_tokenize(train_cleaned['model_a'])\n# # modelb_tokens = word_tokenize(train_cleaned['model_b'])\n# prompt_tokens = word_tokenize(train_cleaned[train_cleaned['prompt']])\n# responsea_tokens = word_tokenize(train_cleaned[train_cleaned['response_a']])\n# responseb_tokens = word_tokenize(train_cleaned[train_cleaned['response_a']])\n\n","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:49:46.577017Z","iopub.execute_input":"2024-05-15T17:49:46.577376Z","iopub.status.idle":"2024-05-15T17:49:46.587517Z","shell.execute_reply.started":"2024-05-15T17:49:46.577347Z","shell.execute_reply":"2024-05-15T17:49:46.586128Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Modeling","metadata":{}},{"cell_type":"code","source":"\n# from sklearn.linear_model import LogisticRegressionCV\n\n# cv = CountVectorizer(max_df =.98,min_df =.05,max_features=9000,ngram_range=(1,3),stop_words = stopwords_list)\n\n# lr  = LogisticRegressionCV(\n# penalty='l1', \n# class_weight=\"balanced\",  #accounts for class imbalance\n# max_iter = 5000,\n# solver =\"saga\",             #faster convergence\n# multi_class =\"multinomial\", #accounts for multiclass\n# cv=5, #accounts for picking the best score out of all the splits\n# scoring='neg_log_loss'       #f1 for imbalanced classification\n# )\n# X = train_cleaned.loc[:,\"response_b\"]\n# y= train_cleaned[['winner_model_a', 'winner_model_b', 'winner_tie']]\n# X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=.3,random_state=42)\n# pipe = Pipeline([(\"c_v\",cv),(\"lr\",MultiOutputClassifier(lr))])\n# pipe.fit(X_train,y_train)\n# # predictions = pipe.predict_proba(X_test )\n\n# probability_class_1 = pipe.predict_proba(X_test)[:, 1]\n# probability_class_2 = pipe.predict_proba(X_test)[:, 2]\n# probability_class_3 = pipe.predict_proba(X_test)[:, 3]","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:49:46.590247Z","iopub.execute_input":"2024-05-15T17:49:46.590741Z","iopub.status.idle":"2024-05-15T17:49:46.601057Z","shell.execute_reply.started":"2024-05-15T17:49:46.590698Z","shell.execute_reply":"2024-05-15T17:49:46.599678Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"# pipe.classes_\n","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:49:46.603064Z","iopub.execute_input":"2024-05-15T17:49:46.603635Z","iopub.status.idle":"2024-05-15T17:49:46.616382Z","shell.execute_reply.started":"2024-05-15T17:49:46.603598Z","shell.execute_reply":"2024-05-15T17:49:46.615077Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"# predictions ","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:49:46.618191Z","iopub.execute_input":"2024-05-15T17:49:46.618661Z","iopub.status.idle":"2024-05-15T17:49:46.627682Z","shell.execute_reply.started":"2024-05-15T17:49:46.618624Z","shell.execute_reply":"2024-05-15T17:49:46.626495Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"# print(log_loss(predictions, y_test))\n# print(classification_report(predictions, y_test))","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:49:46.629493Z","iopub.execute_input":"2024-05-15T17:49:46.630750Z","iopub.status.idle":"2024-05-15T17:49:46.639612Z","shell.execute_reply.started":"2024-05-15T17:49:46.630704Z","shell.execute_reply":"2024-05-15T17:49:46.638482Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"# rf = RandomForestClassifier(\n# # penalty='l1', \n# class_weight=\"balanced\",  #accounts for class imbalance\n# # max_iter = 5000, #fixes convergence error\n# # solver =\"saga\",             #faster convergence\n# # multi_class =\"multinomial\", #accounts for multiclass\n# # cv=5, \n# # scoring='neg_log_loss'       \n# )\n\n# pipe2 = Pipeline([(\"c_v\",cv),(\"rf\",MultiOutputClassifier(rf))])\n# pipe2.fit(X_train,y_train)\n# preds2 = pipe2.predict_proba(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:49:46.641144Z","iopub.execute_input":"2024-05-15T17:49:46.642325Z","iopub.status.idle":"2024-05-15T17:49:46.655080Z","shell.execute_reply.started":"2024-05-15T17:49:46.642287Z","shell.execute_reply":"2024-05-15T17:49:46.653633Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"# preds2","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:49:46.656750Z","iopub.execute_input":"2024-05-15T17:49:46.657402Z","iopub.status.idle":"2024-05-15T17:49:46.668510Z","shell.execute_reply.started":"2024-05-15T17:49:46.657366Z","shell.execute_reply":"2024-05-15T17:49:46.667171Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"# print(log_loss(preds2, y_test))\n# print(classification_report(preds2, y_test))","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:49:46.670233Z","iopub.execute_input":"2024-05-15T17:49:46.670860Z","iopub.status.idle":"2024-05-15T17:49:46.681727Z","shell.execute_reply.started":"2024-05-15T17:49:46.670811Z","shell.execute_reply":"2024-05-15T17:49:46.680687Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":"____","metadata":{}},{"cell_type":"code","source":"def target(data):\n    y1 = data.pop('winner_model_a')\n    y1 = np.array(y1)\n    y2 = data.pop('winner_model_b')\n    y2 = np.array(y2)\n    y3 = data.pop('winner_tie')\n    y3 = np.array(y3)\n    return y1, y2, y3\n\ntarget = target(train_cleaned)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:49:46.683341Z","iopub.execute_input":"2024-05-15T17:49:46.684010Z","iopub.status.idle":"2024-05-15T17:49:46.697008Z","shell.execute_reply.started":"2024-05-15T17:49:46.683976Z","shell.execute_reply":"2024-05-15T17:49:46.695813Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"target_t = np.transpose(target)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:49:46.699082Z","iopub.execute_input":"2024-05-15T17:49:46.699524Z","iopub.status.idle":"2024-05-15T17:49:46.708401Z","shell.execute_reply.started":"2024-05-15T17:49:46.699476Z","shell.execute_reply":"2024-05-15T17:49:46.707027Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"train_size = int(len(train_cleaned) * .8)\nlabels = target_t\n\nprompt_train = train_cleaned['prompt'][:train_size]\nresponse_a_train = train_cleaned['response_a'][:train_size]\nresponse_b_train = train_cleaned['response_b'][:train_size]\n\nlabels_train = labels[:train_size]\n\n\nprompt_test = train_cleaned['prompt'][train_size:]\nresponse_a_test = train_cleaned['response_a'][train_size:]\nresponse_b_test = train_cleaned['response_b'][train_size:]\n\nlabels_test = labels[train_size:]\n\n","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:49:46.710017Z","iopub.execute_input":"2024-05-15T17:49:46.711097Z","iopub.status.idle":"2024-05-15T17:49:46.721721Z","shell.execute_reply.started":"2024-05-15T17:49:46.711054Z","shell.execute_reply":"2024-05-15T17:49:46.720328Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"labels_train","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:49:46.729154Z","iopub.execute_input":"2024-05-15T17:49:46.729660Z","iopub.status.idle":"2024-05-15T17:49:46.744195Z","shell.execute_reply.started":"2024-05-15T17:49:46.729625Z","shell.execute_reply":"2024-05-15T17:49:46.742733Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"array([[1, 0, 0],\n       [0, 1, 0],\n       [0, 0, 1],\n       ...,\n       [1, 0, 0],\n       [0, 1, 0],\n       [1, 0, 0]])"},"metadata":{}}]},{"cell_type":"code","source":"vocab_size = 12000\ntokenize = keras.preprocessing.text.Tokenizer(num_words = vocab_size, char_level=False)\ntokenize.fit_on_texts(prompt_train)\ntokenize.fit_on_texts(response_a_train)\ntokenize.fit_on_texts(response_b_train)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:49:46.745632Z","iopub.execute_input":"2024-05-15T17:49:46.746820Z","iopub.status.idle":"2024-05-15T17:50:07.962513Z","shell.execute_reply.started":"2024-05-15T17:49:46.746762Z","shell.execute_reply":"2024-05-15T17:50:07.960893Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"prompt_bow_train = tokenize.texts_to_matrix(prompt_train)\nprompt_bow_test = tokenize.texts_to_matrix(prompt_test)\nresponsea_bow_train = tokenize.texts_to_matrix(response_a_train)\nresponsea_bow_test = tokenize.texts_to_matrix(response_a_test)\nresponseb_bow_train = tokenize.texts_to_matrix(response_b_train)\nresponseb_bow_test = tokenize.texts_to_matrix(response_b_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:50:07.965141Z","iopub.execute_input":"2024-05-15T17:50:07.966087Z","iopub.status.idle":"2024-05-15T17:50:49.814160Z","shell.execute_reply.started":"2024-05-15T17:50:07.966021Z","shell.execute_reply":"2024-05-15T17:50:49.812463Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"layers = keras.layers","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:50:49.816245Z","iopub.execute_input":"2024-05-15T17:50:49.816770Z","iopub.status.idle":"2024-05-15T17:50:49.823622Z","shell.execute_reply.started":"2024-05-15T17:50:49.816723Z","shell.execute_reply":"2024-05-15T17:50:49.822250Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"# Define our wide model with the functional API\nbow_input1 = layers.Input(shape=(vocab_size,))\nbow_input2 = layers.Input(shape=(vocab_size,))\nbow_input3 = layers.Input(shape=(vocab_size,))\nmerged_layer = layers.concatenate([bow_input1, bow_input2, bow_input3])\nmerged_layer = layers.Dense(256, activation='softmax')(merged_layer)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:50:49.825561Z","iopub.execute_input":"2024-05-15T17:50:49.826154Z","iopub.status.idle":"2024-05-15T17:50:50.098445Z","shell.execute_reply.started":"2024-05-15T17:50:49.826118Z","shell.execute_reply":"2024-05-15T17:50:50.097025Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"# input_layer = Input(shape=(len(train_set.columns),))\nfirst_dense = Dense(units=128, activation='softmax')(merged_layer)\nsecond_dense = Dense(units=128, activation='softmax')(first_dense)\n\ny1_output = Dense(units=1, name='y1_output')(second_dense)\n\nthird_dense = Dense(units=64, activation='softmax')(second_dense)\ny2_output = Dense(units=1, name='y2_output')(third_dense)\n\nfourth_dense = Dense(units=32, activation='softmax')(third_dense)\ny3_output = Dense(units=1, name='y3_output')(fourth_dense)\n# sixth_dense = Dense(units='64', activation='relu')(fifth_dense)\n\n# model = Model(inputs=input_layer, outputs=[y1_output, y2_output, y3_output])\n\n# print(model.summary())","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:50:50.100536Z","iopub.execute_input":"2024-05-15T17:50:50.100942Z","iopub.status.idle":"2024-05-15T17:50:50.232144Z","shell.execute_reply.started":"2024-05-15T17:50:50.100885Z","shell.execute_reply":"2024-05-15T17:50:50.230532Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"# predictions = layers.Dense(1)(merged_layer)\nwide_model = keras.Model(inputs=[bow_input1, bow_input2, bow_input3], outputs=[y1_output, y2_output, y3_output])","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:50:50.233884Z","iopub.execute_input":"2024-05-15T17:50:50.234319Z","iopub.status.idle":"2024-05-15T17:50:50.250271Z","shell.execute_reply.started":"2024-05-15T17:50:50.234286Z","shell.execute_reply":"2024-05-15T17:50:50.248697Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"wide_model.compile(loss='BinaryCrossentropy', optimizer='adam', metrics=['accuracy'])\nprint(wide_model.summary())","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:50:50.252473Z","iopub.execute_input":"2024-05-15T17:50:50.252874Z","iopub.status.idle":"2024-05-15T17:50:50.632473Z","shell.execute_reply.started":"2024-05-15T17:50:50.252840Z","shell.execute_reply":"2024-05-15T17:50:50.631159Z"},"trusted":true},"execution_count":35,"outputs":[{"name":"stdout","text":"Model: \"model\"\n__________________________________________________________________________________________________\n Layer (type)                Output Shape                 Param #   Connected to                  \n==================================================================================================\n input_1 (InputLayer)        [(None, 12000)]              0         []                            \n                                                                                                  \n input_2 (InputLayer)        [(None, 12000)]              0         []                            \n                                                                                                  \n input_3 (InputLayer)        [(None, 12000)]              0         []                            \n                                                                                                  \n concatenate (Concatenate)   (None, 36000)                0         ['input_1[0][0]',             \n                                                                     'input_2[0][0]',             \n                                                                     'input_3[0][0]']             \n                                                                                                  \n dense (Dense)               (None, 256)                  9216256   ['concatenate[0][0]']         \n                                                                                                  \n dense_1 (Dense)             (None, 128)                  32896     ['dense[0][0]']               \n                                                                                                  \n dense_2 (Dense)             (None, 128)                  16512     ['dense_1[0][0]']             \n                                                                                                  \n dense_3 (Dense)             (None, 64)                   8256      ['dense_2[0][0]']             \n                                                                                                  \n dense_4 (Dense)             (None, 32)                   2080      ['dense_3[0][0]']             \n                                                                                                  \n y1_output (Dense)           (None, 1)                    129       ['dense_2[0][0]']             \n                                                                                                  \n y2_output (Dense)           (None, 1)                    65        ['dense_3[0][0]']             \n                                                                                                  \n y3_output (Dense)           (None, 1)                    33        ['dense_4[0][0]']             \n                                                                                                  \n==================================================================================================\nTotal params: 9276227 (35.39 MB)\nTrainable params: 9276227 (35.39 MB)\nNon-trainable params: 0 (0.00 Byte)\n__________________________________________________________________________________________________\nNone\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Deep Model","metadata":{}},{"cell_type":"code","source":"train_embed1 = tokenize.texts_to_sequences(prompt_train)\ntest_embed1 = tokenize.texts_to_sequences(prompt_test)\n\ntrain_embed2 = tokenize.texts_to_sequences(response_a_train)\ntest_embed2 = tokenize.texts_to_sequences(response_a_test)\n\ntrain_embed3 = tokenize.texts_to_sequences(response_b_train)\ntest_embed3 = tokenize.texts_to_sequences(response_b_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:50:50.634349Z","iopub.execute_input":"2024-05-15T17:50:50.634793Z","iopub.status.idle":"2024-05-15T17:51:08.047860Z","shell.execute_reply.started":"2024-05-15T17:50:50.634756Z","shell.execute_reply":"2024-05-15T17:51:08.046259Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"max_seq_length = 170\ntrain_embed1 = keras.preprocessing.sequence.pad_sequences(train_embed1, maxlen=max_seq_length)\ntest_embed1 = keras.preprocessing.sequence.pad_sequences(test_embed1, maxlen=max_seq_length)\n\ntrain_embed2 = keras.preprocessing.sequence.pad_sequences(train_embed2, maxlen=max_seq_length)\ntest_embed2 = keras.preprocessing.sequence.pad_sequences(test_embed2, maxlen=max_seq_length)\n\ntrain_embed3 = keras.preprocessing.sequence.pad_sequences(train_embed3, maxlen=max_seq_length)\ntest_embed3 = keras.preprocessing.sequence.pad_sequences(test_embed3, maxlen=max_seq_length)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:51:08.049856Z","iopub.execute_input":"2024-05-15T17:51:08.050303Z","iopub.status.idle":"2024-05-15T17:51:09.976402Z","shell.execute_reply.started":"2024-05-15T17:51:08.050264Z","shell.execute_reply":"2024-05-15T17:51:09.974883Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"deep_inputs = layers.Input(shape=(max_seq_length,))\nembedding1 = layers.Embedding(vocab_size, 8,   input_length=max_seq_length)(deep_inputs)\nembedding1 = layers.Flatten()(embedding1)\nembedding2 = layers.Embedding(vocab_size, 8,   input_length=max_seq_length)(deep_inputs)\nembedding2 = layers.Flatten()(embedding2)\nembedding3 = layers.Embedding(vocab_size, 8,   input_length=max_seq_length)(deep_inputs)\nembedding3 = layers.Flatten()(embedding3)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:51:09.979398Z","iopub.execute_input":"2024-05-15T17:51:09.980216Z","iopub.status.idle":"2024-05-15T17:51:10.051103Z","shell.execute_reply.started":"2024-05-15T17:51:09.980170Z","shell.execute_reply":"2024-05-15T17:51:10.049577Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"embed_out1 = layers.Dense(1, name='embed_out1')(embedding1)\nembed_out2 = layers.Dense(1, name='embed_out2')(embedding2)\nembed_out3 = layers.Dense(1, name='embed_out3')(embedding3)\n# y2_output = Dense(units=1, name='y2_output')(third_dense)\ndeep_model = Model(inputs=[embedding1, embedding2, embedding3], outputs=[embed_out1, embed_out2, embed_out3])\ndeep_model.compile(loss='BinaryCrossentropy', optimizer='adam', metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:51:10.053232Z","iopub.execute_input":"2024-05-15T17:51:10.053714Z","iopub.status.idle":"2024-05-15T17:51:10.135843Z","shell.execute_reply.started":"2024-05-15T17:51:10.053679Z","shell.execute_reply":"2024-05-15T17:51:10.134432Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"print(deep_model.summary())","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:51:10.137669Z","iopub.execute_input":"2024-05-15T17:51:10.139081Z","iopub.status.idle":"2024-05-15T17:51:10.169283Z","shell.execute_reply.started":"2024-05-15T17:51:10.139026Z","shell.execute_reply":"2024-05-15T17:51:10.168010Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"Model: \"model_1\"\n__________________________________________________________________________________________________\n Layer (type)                Output Shape                 Param #   Connected to                  \n==================================================================================================\n input_5 (InputLayer)        [(None, 1360)]               0         []                            \n                                                                                                  \n input_6 (InputLayer)        [(None, 1360)]               0         []                            \n                                                                                                  \n input_7 (InputLayer)        [(None, 1360)]               0         []                            \n                                                                                                  \n embed_out1 (Dense)          (None, 1)                    1361      ['input_5[0][0]']             \n                                                                                                  \n embed_out2 (Dense)          (None, 1)                    1361      ['input_6[0][0]']             \n                                                                                                  \n embed_out3 (Dense)          (None, 1)                    1361      ['input_7[0][0]']             \n                                                                                                  \n==================================================================================================\nTotal params: 4083 (15.95 KB)\nTrainable params: 4083 (15.95 KB)\nNon-trainable params: 0 (0.00 Byte)\n__________________________________________________________________________________________________\nNone\n","output_type":"stream"}]},{"cell_type":"code","source":"wide_model.input","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:51:10.171654Z","iopub.execute_input":"2024-05-15T17:51:10.172196Z","iopub.status.idle":"2024-05-15T17:51:10.181222Z","shell.execute_reply.started":"2024-05-15T17:51:10.172150Z","shell.execute_reply":"2024-05-15T17:51:10.180195Z"},"trusted":true},"execution_count":41,"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"[<KerasTensor: shape=(None, 12000) dtype=float32 (created by layer 'input_1')>,\n <KerasTensor: shape=(None, 12000) dtype=float32 (created by layer 'input_2')>,\n <KerasTensor: shape=(None, 12000) dtype=float32 (created by layer 'input_3')>]"},"metadata":{}}]},{"cell_type":"code","source":"[deep_model.input]","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:51:10.183209Z","iopub.execute_input":"2024-05-15T17:51:10.183999Z","iopub.status.idle":"2024-05-15T17:51:10.194311Z","shell.execute_reply.started":"2024-05-15T17:51:10.183953Z","shell.execute_reply":"2024-05-15T17:51:10.192999Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"[[<KerasTensor: shape=(None, 1360) dtype=float32 (created by layer 'input_5')>,\n  <KerasTensor: shape=(None, 1360) dtype=float32 (created by layer 'input_6')>,\n  <KerasTensor: shape=(None, 1360) dtype=float32 (created by layer 'input_7')>]]"},"metadata":{}}]},{"cell_type":"code","source":"# Combine wide and deep into one model\n# merged_out = layers.concatenate([wide_model.output, deep_model.output])\n# merged_out = layers.Dense(1)(merged_out)\ncombined_model = keras.Model(wide_model.input + [deep_model.input], [wide_model.output, deep_model.output])\nprint(combined_model.summary())\n\n","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:51:10.196376Z","iopub.execute_input":"2024-05-15T17:51:10.196830Z","iopub.status.idle":"2024-05-15T17:51:10.270969Z","shell.execute_reply.started":"2024-05-15T17:51:10.196790Z","shell.execute_reply":"2024-05-15T17:51:10.269616Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"Model: \"model_2\"\n__________________________________________________________________________________________________\n Layer (type)                Output Shape                 Param #   Connected to                  \n==================================================================================================\n input_1 (InputLayer)        [(None, 12000)]              0         []                            \n                                                                                                  \n input_2 (InputLayer)        [(None, 12000)]              0         []                            \n                                                                                                  \n input_3 (InputLayer)        [(None, 12000)]              0         []                            \n                                                                                                  \n concatenate (Concatenate)   (None, 36000)                0         ['input_1[0][0]',             \n                                                                     'input_2[0][0]',             \n                                                                     'input_3[0][0]']             \n                                                                                                  \n dense (Dense)               (None, 256)                  9216256   ['concatenate[0][0]']         \n                                                                                                  \n dense_1 (Dense)             (None, 128)                  32896     ['dense[0][0]']               \n                                                                                                  \n dense_2 (Dense)             (None, 128)                  16512     ['dense_1[0][0]']             \n                                                                                                  \n dense_3 (Dense)             (None, 64)                   8256      ['dense_2[0][0]']             \n                                                                                                  \n dense_4 (Dense)             (None, 32)                   2080      ['dense_3[0][0]']             \n                                                                                                  \n input_5 (InputLayer)        [(None, 1360)]               0         []                            \n                                                                                                  \n input_6 (InputLayer)        [(None, 1360)]               0         []                            \n                                                                                                  \n input_7 (InputLayer)        [(None, 1360)]               0         []                            \n                                                                                                  \n y1_output (Dense)           (None, 1)                    129       ['dense_2[0][0]']             \n                                                                                                  \n y2_output (Dense)           (None, 1)                    65        ['dense_3[0][0]']             \n                                                                                                  \n y3_output (Dense)           (None, 1)                    33        ['dense_4[0][0]']             \n                                                                                                  \n embed_out1 (Dense)          (None, 1)                    1361      ['input_5[0][0]']             \n                                                                                                  \n embed_out2 (Dense)          (None, 1)                    1361      ['input_6[0][0]']             \n                                                                                                  \n embed_out3 (Dense)          (None, 1)                    1361      ['input_7[0][0]']             \n                                                                                                  \n==================================================================================================\nTotal params: 9280310 (35.40 MB)\nTrainable params: 9280310 (35.40 MB)\nNon-trainable params: 0 (0.00 Byte)\n__________________________________________________________________________________________________\nNone\n","output_type":"stream"}]},{"cell_type":"code","source":"combined_model.compile(loss='BinaryCrossentropy',\n                       optimizer='adam',\n                       metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:51:10.272760Z","iopub.execute_input":"2024-05-15T17:51:10.273206Z","iopub.status.idle":"2024-05-15T17:51:10.291325Z","shell.execute_reply.started":"2024-05-15T17:51:10.273174Z","shell.execute_reply":"2024-05-15T17:51:10.289253Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"# total_inputs = [prompt_bow_train, responsea_bow_train, responseb_bow_train] + [train_embed1, train_embed2, train_embed3]","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:51:10.293622Z","iopub.execute_input":"2024-05-15T17:51:10.294178Z","iopub.status.idle":"2024-05-15T17:51:10.299828Z","shell.execute_reply.started":"2024-05-15T17:51:10.294132Z","shell.execute_reply":"2024-05-15T17:51:10.298650Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"# train_embed1","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # Run training\n# combined_model.fit([[prompt_bow_test, responsea_bow_test, responseb_bow_test] + [train_embed1, train_embed2, train_embed3]], labels_train, epochs=10, batch_size=128)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:51:10.301418Z","iopub.execute_input":"2024-05-15T17:51:10.301804Z","iopub.status.idle":"2024-05-15T17:51:10.310232Z","shell.execute_reply.started":"2024-05-15T17:51:10.301773Z","shell.execute_reply":"2024-05-15T17:51:10.309268Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"# combined_model.evaluate([prompt_bow_test, responsea_bow_test, responseb_bow_test] + [train_embed1, train_embed2, train_embed3], labels_test, batch_size=128)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:51:10.311963Z","iopub.execute_input":"2024-05-15T17:51:10.312419Z","iopub.status.idle":"2024-05-15T17:51:10.326107Z","shell.execute_reply.started":"2024-05-15T17:51:10.312370Z","shell.execute_reply":"2024-05-15T17:51:10.324685Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"# # Generate predictions\n# predictions = combined_model.predict([description_bow_test, variety_test] + [test_embed])","metadata":{"execution":{"iopub.status.busy":"2024-05-15T17:51:10.328184Z","iopub.execute_input":"2024-05-15T17:51:10.328668Z","iopub.status.idle":"2024-05-15T17:51:10.338923Z","shell.execute_reply.started":"2024-05-15T17:51:10.328584Z","shell.execute_reply":"2024-05-15T17:51:10.337656Z"},"trusted":true},"execution_count":48,"outputs":[]}]}